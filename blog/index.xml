<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Martin Sterchi</title>
<link>https://martinsterchi.ch/blog/</link>
<atom:link href="https://martinsterchi.ch/blog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.42</generator>
<lastBuildDate>Fri, 28 Feb 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>SBB Network Analysis - Part 1</title>
  <dc:creator>Martin Sterchi</dc:creator>
  <link>https://martinsterchi.ch/blog/sbb_nw/</link>
  <description><![CDATA[ 




<p>For quite some time I have been wondering if there are some interesting Swiss data that would serve as the basis for some fun network analysis. As a fan of public transportation and a long-time owner of a Swiss train pass (“GA”), the answer should have been obvious much sooner: the <strong>Swiss public transport network</strong>.</p>
<p>I wanted to create a (static) network in which <em>each node corresponds to a train station</em> and <em>each directed edge between any two nodes, A and B, means there is at least one train going nonstop from A to B</em>. Ideally, the edge would also be attributed with some weight representing the importance of the edge (e.g., how many trains go nonstop from A to B on a given day).</p>
<p>The structure of this post is as follows. I will first introduce the two datasets that I used to create the network. I will then show how to load and preprocess each one of them and how to join them. Finally, I will present how to transform those data into a form that is suitable for network analysis.</p>
<p>This is the first part of a series that will cover all kinds of fun network analysis based on the Swiss railway network.</p>
<section id="data-sources" class="level3">
<h3 class="anchored" data-anchor-id="data-sources">Data sources</h3>
<p>It was not that obvious how a network with nodes and edges following the definitions given above could be constructed based on data from the Swiss Federal Railways (abbreviated by the German speakers in Switzerland as <strong>SBB</strong>). With some help from SBB Experts and the <a href="https://data.sbb.ch/pages/home/">SBB Open Data Plattform</a>, I finally found the right data.</p>
<p>The first dataset is called “<strong>Ist-Daten</strong>” and, for a given day, contains all regular stops of all trains in Switzerland with their planned and effective arrival and departure times. From this data, we can infer all nonstop stretches of any train in Switzerland.</p>
<p>Note that the “Ist-Daten” not only contain the data for trains but also for all other public transport (buses, trams, and even boats). To keep things simple we will focus on the train network.</p>
<p>The second dataset is the “<strong>Dienststellen-Daten</strong>” which basically allows to add node attributes such as the geographic coordinates of a node (i.e., a train station).</p>
</section>
<section id="load-and-preprocess-ist-daten" class="level3">
<h3 class="anchored" data-anchor-id="load-and-preprocess-ist-daten">Load and preprocess “Ist-Daten”</h3>
<p>Here, we will load and preprocess the “Ist-Daten” from which we can derive the edges of our network. First, I import some Python libraries and print their version number for better reproducibility of this code.</p>
<div id="f7381e15" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Counter</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check versions of libraries.</span></span>
<span id="cb1-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NumPy version:"</span>, np.__version__)</span>
<span id="cb1-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pandas version:"</span>, pd.__version__)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure there is no limit on the number of columns shown.</span></span>
<span id="cb1-10">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>NumPy version: 1.26.4
Pandas version: 2.1.4</code></pre>
</div>
</div>
<p>Let’s now load the data. You can see in the filename that I downloaded the “Ist-Daten” from the SBB portal for June 6, 2023. You can get the data for any day you want <a href="https://data.sbb.ch/explore/dataset/ist-daten-sbb/information/">here</a>.</p>
<div id="a1fe77af" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the data</span></span>
<span id="cb3-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2023-06-06_istdaten.csv'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>, low_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) </span></code></pre></div>
</div>
<p>To get a feeling for the data, let’s check the number of rows and columns.</p>
<div id="ffdd56a2" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of rows and columns</span></span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(2309817, 21)</code></pre>
</div>
</div>
<p>Ok, it’s actually a pretty big dataset: it has over 2.3 million rows. That makes sense as this file contains every stop of every vehicle involved in public transport on a given day. Thus, every row corresponds to a stop of a train, bus, or any other vehicle of public transport.</p>
<div id="f3816566" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Missing values per column</span></span>
<span id="cb6-2">df.isna().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>BETRIEBSTAG                  0
FAHRT_BEZEICHNER             0
BETREIBER_ID                 0
BETREIBER_ABK                0
BETREIBER_NAME               0
PRODUKT_ID                 233
LINIEN_ID                    0
LINIEN_TEXT                  0
UMLAUF_ID              1196819
VERKEHRSMITTEL_TEXT          0
ZUSATZFAHRT_TF               0
FAELLT_AUS_TF                0
BPUIC                        0
HALTESTELLEN_NAME       158400
ANKUNFTSZEIT            138774
AN_PROGNOSE             164786
AN_PROGNOSE_STATUS      138560
ABFAHRTSZEIT            138604
AB_PROGNOSE             165447
AB_PROGNOSE_STATUS      138351
DURCHFAHRT_TF                0
dtype: int64</code></pre>
</div>
</div>
<p>We can see that some columns contain many missing values. The only one I worry about for now is the column <code>PRODUKT_ID</code>. If you look through these rows (I don’t show that here), you can see that they should all be of type “Zug” (train). Thus, we impute accordingly:</p>
<div id="76816d9b" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Impute 'Zug'</span></span>
<span id="cb8-2">df.loc[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PRODUKT_ID"</span>].isna(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PRODUKT_ID"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Zug'</span></span></code></pre></div>
</div>
<p>There are quite a few date-timestamp columns that are not yet in the proper format. Thus, we now convert them to datetime formats:</p>
<div id="d703efc5" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert BETRIEBSTAG to date format</span></span>
<span id="cb9-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BETRIEBSTAG'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BETRIEBSTAG'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.%m.%Y"</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert ANKUNFTSZEIT, AN_PROGNOSE, ABFAHRTSZEIT, AB_PROGNOSE to datetime format</span></span>
<span id="cb9-5">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ANKUNFTSZEIT'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ANKUNFTSZEIT'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.%m.%Y %H:%M"</span>)</span>
<span id="cb9-6">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AN_PROGNOSE'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AN_PROGNOSE'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.%m.%Y %H:%M:%S"</span>)</span>
<span id="cb9-7">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ABFAHRTSZEIT'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ABFAHRTSZEIT'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.%m.%Y %H:%M"</span>)</span>
<span id="cb9-8">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AB_PROGNOSE'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AB_PROGNOSE'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.%m.%Y %H:%M:%S"</span>)</span></code></pre></div>
</div>
<p>Now is a good time to finally have a look at the dataframe:</p>
<div id="75d1fe52" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's look at first few rows</span></span>
<span id="cb10-2">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">BETRIEBSTAG</th>
<th data-quarto-table-cell-role="th">FAHRT_BEZEICHNER</th>
<th data-quarto-table-cell-role="th">BETREIBER_ID</th>
<th data-quarto-table-cell-role="th">BETREIBER_ABK</th>
<th data-quarto-table-cell-role="th">BETREIBER_NAME</th>
<th data-quarto-table-cell-role="th">PRODUKT_ID</th>
<th data-quarto-table-cell-role="th">LINIEN_ID</th>
<th data-quarto-table-cell-role="th">LINIEN_TEXT</th>
<th data-quarto-table-cell-role="th">UMLAUF_ID</th>
<th data-quarto-table-cell-role="th">VERKEHRSMITTEL_TEXT</th>
<th data-quarto-table-cell-role="th">ZUSATZFAHRT_TF</th>
<th data-quarto-table-cell-role="th">FAELLT_AUS_TF</th>
<th data-quarto-table-cell-role="th">BPUIC</th>
<th data-quarto-table-cell-role="th">HALTESTELLEN_NAME</th>
<th data-quarto-table-cell-role="th">ANKUNFTSZEIT</th>
<th data-quarto-table-cell-role="th">AN_PROGNOSE</th>
<th data-quarto-table-cell-role="th">AN_PROGNOSE_STATUS</th>
<th data-quarto-table-cell-role="th">ABFAHRTSZEIT</th>
<th data-quarto-table-cell-role="th">AB_PROGNOSE</th>
<th data-quarto-table-cell-role="th">AB_PROGNOSE_STATUS</th>
<th data-quarto-table-cell-role="th">DURCHFAHRT_TF</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2023-06-06</td>
<td>80:800631:17230:000</td>
<td>80:800631</td>
<td>DB</td>
<td>DB Regio AG Baden-Württemberg</td>
<td>Zug</td>
<td>17230</td>
<td>RB</td>
<td>NaN</td>
<td>RB</td>
<td>False</td>
<td>False</td>
<td>8500090</td>
<td>Basel Bad Bf</td>
<td>2023-06-06 04:59:00</td>
<td>2023-06-06 04:59:00</td>
<td>PROGNOSE</td>
<td>NaT</td>
<td>NaT</td>
<td>NaN</td>
<td>False</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2023-06-06</td>
<td>80:800631:17233:000</td>
<td>80:800631</td>
<td>DB</td>
<td>DB Regio AG Baden-Württemberg</td>
<td>Zug</td>
<td>17233</td>
<td>RB</td>
<td>NaN</td>
<td>RB</td>
<td>False</td>
<td>False</td>
<td>8500090</td>
<td>Basel Bad Bf</td>
<td>NaT</td>
<td>NaT</td>
<td>NaN</td>
<td>2023-06-06 06:07:00</td>
<td>2023-06-06 06:07:00</td>
<td>PROGNOSE</td>
<td>False</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2023-06-06</td>
<td>80:800631:17234:000</td>
<td>80:800631</td>
<td>DB</td>
<td>DB Regio AG Baden-Württemberg</td>
<td>Zug</td>
<td>17234</td>
<td>RB</td>
<td>NaN</td>
<td>RB</td>
<td>False</td>
<td>False</td>
<td>8500090</td>
<td>Basel Bad Bf</td>
<td>2023-06-06 05:56:00</td>
<td>2023-06-06 05:58:00</td>
<td>PROGNOSE</td>
<td>NaT</td>
<td>NaT</td>
<td>NaN</td>
<td>False</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2023-06-06</td>
<td>80:800631:17235:000</td>
<td>80:800631</td>
<td>DB</td>
<td>DB Regio AG Baden-Württemberg</td>
<td>Zug</td>
<td>17235</td>
<td>RB</td>
<td>NaN</td>
<td>RB</td>
<td>False</td>
<td>False</td>
<td>8500090</td>
<td>Basel Bad Bf</td>
<td>NaT</td>
<td>NaT</td>
<td>NaN</td>
<td>2023-06-06 06:43:00</td>
<td>2023-06-06 06:43:00</td>
<td>PROGNOSE</td>
<td>False</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2023-06-06</td>
<td>80:800631:17236:000</td>
<td>80:800631</td>
<td>DB</td>
<td>DB Regio AG Baden-Württemberg</td>
<td>Zug</td>
<td>17236</td>
<td>RB</td>
<td>NaN</td>
<td>RB</td>
<td>False</td>
<td>False</td>
<td>8500090</td>
<td>Basel Bad Bf</td>
<td>2023-06-06 06:33:00</td>
<td>2023-06-06 06:34:00</td>
<td>PROGNOSE</td>
<td>NaT</td>
<td>NaT</td>
<td>NaN</td>
<td>False</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>But what do all these columns mean? I have browsed the metadata a bit and found the following explanations (that I hopefully accurately reproduce in English):</p>
<ul>
<li><code>BETRIEBSTAG</code>: Simply the day on which the data were recorded.</li>
<li><code>FAHRT_BEZEICHNER</code>: This is some elaborate identifier in the format [UIC-Countrycode]:[GO-Number]:[VM-Number]:[Extended Reference].</li>
<li><code>BETREIBER_ID</code>: [UIC-Countrycode]:[GO-Number]. GO is short for “Geschäftsorganisation”. For foreign organizations it is not a GO-Number but a TU-Number with TU meaning “Transportunternehmen”. It is basically an ID for the company running that particular train.</li>
<li><code>BETREIBER_ABK</code>: The abbreviation for the company running the train.</li>
<li><code>BETREIBER_NAME</code>: The full name of the company running the train.</li>
<li><code>PRODUKT_ID</code>: Type of public transport.</li>
<li><code>LINIEN_ID</code>: The ID for the route of that train.</li>
<li><code>LINIEN_TEXT</code>: The public ID for the route of that train.</li>
<li><code>UMLAUF_ID</code>: An ID for a “Umlauf” which describes the period starting with the vehicle leaving the garage and ending with the vehicle being deposited back in the garage.</li>
<li><code>ZUSATZFAHRT_TF</code>: Is true if it is an extraordinary (not usually scheduled) trip.</li>
<li><code>FAELLT_AUS_TF</code>: Is true if the trip is cancelled.</li>
<li><code>BPUIC</code>: The ID of the station.</li>
<li><code>HALTESTELLEN_NAME</code>: The name of the station.</li>
<li><code>ANKUNFTSZEIT</code>: Planned time of arrival at the station.</li>
<li><code>AN_PROGNOSE</code>: Prediction of time of arrival at the station.</li>
<li><code>AN_PROGNOSE_STATUS</code>: Status of that prediction. Possible values are: “UNBEKANNT”, “leer”, “PROGNOSE”, “GESCHAETZT”, “REAL”. If the value of that column is “REAL”, it means that the predicted time of arrival is the time the train actually arrived at the station.</li>
<li><code>ABFAHRTSZEIT</code>, <code>AB_PROGNOSE</code>, <code>AB_PROGNOSE_STATUS</code>: Same definitions as for arrival but here for departure from the station.</li>
<li><code>DURCHFAHRT_TF</code>: Is true if the vehicle does not stop even if a stop was scheduled.</li>
</ul>
<p>Let’s now have a look at the values in the column <code>PRODUKT_ID</code>:</p>
<div id="1f9df9df" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Look at PRODUKT_ID</span></span>
<span id="cb11-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PRODUKT_ID"</span>].value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>PRODUKT_ID
Bus            1746016
Tram            247305
Zug             162038
BUS             147531
Metro             4304
Zahnradbahn       1965
Schiff             658
Name: count, dtype: int64</code></pre>
</div>
</div>
<p>We can see that trains are only the third most frequent category in this data. However, as mentioned before, we want to keep it simple and now reduce the dataset to only trains.</p>
<div id="37d72949" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First we reduce to only trains</span></span>
<span id="cb13-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PRODUKT_ID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zug"</span>]</span></code></pre></div>
</div>
<p>In a next step, we remove all rows where the corresponding train has been cancelled.</p>
<div id="21bda737" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter out all entries with FAELLT_AUS_TF == True</span></span>
<span id="cb14-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FAELLT_AUS_TF'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>]</span></code></pre></div>
</div>
<p>Let’s explore the data a bit more before we move to the second dataset. Let’s check out the most frequent values that occur in the column <code>BETREIBER_NAME</code>:</p>
<div id="40e4ef7e" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Look at BETREIBER_NAME</span></span>
<span id="cb15-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BETREIBER_NAME"</span>].value_counts().head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>BETREIBER_NAME
Schweizerische Bundesbahnen SBB    61798
BLS AG (bls)                       15842
THURBO                             13250
Aargau Verkehr AG                   7220
Rhätische Bahn                      5366
Name: count, dtype: int64</code></pre>
</div>
</div>
<p>As expected, SBB is the company serving the largest number of stations. What about the column <code>VERKEHRSMITTEL_TEXT</code>?</p>
<div id="4a3ca69a" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Look at VERKEHRSMITTEL_TEXT</span></span>
<span id="cb17-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VERKEHRSMITTEL_TEXT"</span>].value_counts().head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>VERKEHRSMITTEL_TEXT
S     105288
R      31987
RE      8551
IR      7104
IC      2891
Name: count, dtype: int64</code></pre>
</div>
</div>
<p>We can see that the most frequent type of trains are S-Bahns (<code>S</code>). Finally, let’s check the most frequent train stations that occur in the data:</p>
<div id="f83e8924" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Look at HALTESTELLEN_NAME</span></span>
<span id="cb19-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HALTESTELLEN_NAME"</span>].value_counts().head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>HALTESTELLEN_NAME
Zürich HB          1914
Bern               1706
Winterthur          948
Zürich Oerlikon     918
Luzern              814
Name: count, dtype: int64</code></pre>
</div>
</div>
<p>Unsurprisingly, Zürich and Bern are the most frequent values occuring in the data.</p>
</section>
<section id="load-and-preprocess-dienststellen-daten" class="level3">
<h3 class="anchored" data-anchor-id="load-and-preprocess-dienststellen-daten">Load and preprocess “Dienststellen-Daten”</h3>
<p>Fortunately, we can go through the second dataset a bit more quickly. We again start by loading it and checking the dimensions of the dataframe.</p>
<div id="ea2bd70a" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the data</span></span>
<span id="cb21-2">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dienststellen_full.csv'</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>, low_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb21-3"></span>
<span id="cb21-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of rows and columns</span></span>
<span id="cb21-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ds.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(152433, 78)</code></pre>
</div>
</div>
<p>The data contains a column <code>GUELTIG_BIS</code> that allows us to filter out all stations that are not valid anymore (closed down?). But first we need to transform it into the proper format.</p>
<div id="663f6a30" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># GUELTIG_BIS as datetime</span></span>
<span id="cb23-2">ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GUELTIG_BIS'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GUELTIG_BIS'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"%Y-%m-</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep only currently valid entries</span></span>
<span id="cb23-5">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds[ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'GUELTIG_BIS'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2099-12-31"</span>]</span></code></pre></div>
</div>
<p>Finally, we keep only the columns we need (identifier, official name, and geo coordinates).</p>
<div id="c95d3b07" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep only the relevant columns</span></span>
<span id="cb24-2">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BPUIC"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BEZEICHNUNG_OFFIZIELL"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E_WGS84"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N_WGS84"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z_WGS84"</span>]]</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show first few rows</span></span>
<span id="cb24-5">ds.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">BPUIC</th>
<th data-quarto-table-cell-role="th">BEZEICHNUNG_OFFIZIELL</th>
<th data-quarto-table-cell-role="th">E_WGS84</th>
<th data-quarto-table-cell-role="th">N_WGS84</th>
<th data-quarto-table-cell-role="th">Z_WGS84</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">26</td>
<td>8531284</td>
<td>Samnaun-Ravaisch (Talst. I)</td>
<td>10.375228</td>
<td>46.951317</td>
<td>1775.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">99</td>
<td>8530938</td>
<td>Fräkmüntegg (3. Sekt. Talst.)</td>
<td>8.251436</td>
<td>46.990475</td>
<td>1413.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">114</td>
<td>1400013</td>
<td>Annecy, Pont Neuf</td>
<td>6.114629</td>
<td>45.897774</td>
<td>-9999.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">115</td>
<td>8530879</td>
<td>Foppa (Naraus)</td>
<td>9.267387</td>
<td>46.846531</td>
<td>1418.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">134</td>
<td>8584977</td>
<td>Essence Tamoil Collombey</td>
<td>6.954193</td>
<td>46.266124</td>
<td>392.5</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="combine-the-two-datasets" class="level3">
<h3 class="anchored" data-anchor-id="combine-the-two-datasets">Combine the two datasets</h3>
<p>We now merge the “Dienststellen-Daten” to the first dataset via the <code>BPUIC</code> variable.</p>
<div id="ec57e9a2" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Left-join with station names and coordinates</span></span>
<span id="cb25-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge(df, ds, on <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BPUIC'</span>, how <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span></code></pre></div>
</div>
<p>Unfortunately, there are some rows for which there is no matching entry in the “Dienststellen-Daten”. But fortunately, we know which stations are affected based on the <code>HALTESTELLEN_NAME</code> column.</p>
<div id="779752e6" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># There are still some missings after left-join (Oberkulm Post and Borgnone-Cadanza)</span></span>
<span id="cb26-2">df.loc[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BEZEICHNUNG_OFFIZIELL'</span>].isna(), [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HALTESTELLEN_NAME'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BEZEICHNUNG_OFFIZIELL'</span>]]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">HALTESTELLEN_NAME</th>
<th data-quarto-table-cell-role="th">BEZEICHNUNG_OFFIZIELL</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">101255</td>
<td>Borgnone-Cadanza</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">101347</td>
<td>Borgnone-Cadanza</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">101384</td>
<td>Borgnone-Cadanza</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">101387</td>
<td>Borgnone-Cadanza</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">101408</td>
<td>Borgnone-Cadanza</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">156746</td>
<td>Oberkulm Post</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">156763</td>
<td>Oberkulm Post</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">156786</td>
<td>Oberkulm Post</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">156803</td>
<td>Oberkulm Post</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">156823</td>
<td>Oberkulm Post</td>
<td>NaN</td>
</tr>
</tbody>
</table>

<p>156 rows × 2 columns</p>
</div>
</div>
</div>
<p>The first part of the fix consists of imputing the names of the stations in the column <code>BEZEICHNUNG_OFFIZIELL</code>.</p>
<div id="41e55348" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># But they have data in the original data, so let's impute those</span></span>
<span id="cb27-2">df.loc[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BEZEICHNUNG_OFFIZIELL'</span>].isna(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BEZEICHNUNG_OFFIZIELL"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.loc[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BEZEICHNUNG_OFFIZIELL'</span>].isna(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HALTESTELLEN_NAME"</span>]</span></code></pre></div>
</div>
<p>The second part of the fix is to manually add the geo coordinates for the missing two stations (Oberkulm Post and Borgnone-Cadanza).</p>
<div id="32418ba5" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Impute geo coordinates and elevation for those missing</span></span>
<span id="cb28-2">df.loc[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BEZEICHNUNG_OFFIZIELL'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Oberkulm Post"</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E_WGS84"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N_WGS84"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z_WGS84"</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.11970</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">47.30414</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">483</span>)</span>
<span id="cb28-3">df.loc[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BEZEICHNUNG_OFFIZIELL'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Borgnone-Cadanza"</span>, [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"E_WGS84"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"N_WGS84"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z_WGS84"</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.62254</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">46.15853</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">713</span>)</span></code></pre></div>
</div>
<p>Now, we are finally ready to start extracting the network from this data!</p>
</section>
<section id="convert-it-to-a-network" class="level3">
<h3 class="anchored" data-anchor-id="convert-it-to-a-network">Convert it to a network</h3>
<p>As I mentioned several times, every row corresponds to a stop of a train at a train station. One train ride from some initial station to some end station (called “Fahrt” in German) then typically consists of several stops along the way. However, there are some “Fahrten” with only one entry. Presumably these are mostly foreign trains that have their end destination at some border station. I decided to remove those entries:</p>
<div id="f8e4ab4b" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First group by FAHRT_BEZEICHNER and then filter out all groups with only one entry</span></span>
<span id="cb29-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># It's mostly trains that stop at a place at the border (I think)</span></span>
<span id="cb29-3">df_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FAHRT_BEZEICHNER'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> g: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb29-4"></span>
<span id="cb29-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># How many rows do we loose with that?</span></span>
<span id="cb29-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df_filtered.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>566</code></pre>
</div>
</div>
<p>This preprocessing step removes 566 rows.</p>
<p>Now we group the rows by <code>FAHRT_BEZEICHNER</code> so that each group is one “Fahrt”. In every group we sort the stops along the way in an ascending order of the departure time.</p>
<div id="a2c95f95" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to sort entries within a group in ascending order of ABFAHRTSZEIT</span></span>
<span id="cb31-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sort_data(group):</span>
<span id="cb31-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> group.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ABFAHRTSZEIT'</span>, ascending <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb31-4"></span>
<span id="cb31-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort for each group</span></span>
<span id="cb31-6">df_sorted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_filtered.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FAHRT_BEZEICHNER'</span>, group_keys<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(sort_data)</span></code></pre></div>
</div>
<p>Let’s have a look at one “Fahrt” to get a better idea:</p>
<div id="8cdb685f" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Look at one example Fahrt</span></span>
<span id="cb32-2">df_sorted.loc[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'85:11:1511:003'</span>],[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BETREIBER_ABK'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LINIEN_TEXT'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BEZEICHNUNG_OFFIZIELL'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ABFAHRTSZEIT'</span>]]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">BETREIBER_ABK</th>
<th data-quarto-table-cell-role="th">LINIEN_TEXT</th>
<th data-quarto-table-cell-role="th">BEZEICHNUNG_OFFIZIELL</th>
<th data-quarto-table-cell-role="th">ABFAHRTSZEIT</th>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">FAHRT_BEZEICHNER</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td rowspan="12" data-quarto-table-cell-role="th" data-valign="top">85:11:1511:003</td>
<td data-quarto-table-cell-role="th">1758</td>
<td>SBB</td>
<td>IC5</td>
<td>Lausanne</td>
<td>2023-06-06 06:15:00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1759</td>
<td>SBB</td>
<td>IC5</td>
<td>Yverdon-les-Bains</td>
<td>2023-06-06 06:37:00</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1760</td>
<td>SBB</td>
<td>IC5</td>
<td>Neuchâtel</td>
<td>2023-06-06 06:58:00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1761</td>
<td>SBB</td>
<td>IC5</td>
<td>Biel/Bienne</td>
<td>2023-06-06 07:17:00</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1762</td>
<td>SBB</td>
<td>IC5</td>
<td>Grenchen Süd</td>
<td>2023-06-06 07:26:00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1763</td>
<td>SBB</td>
<td>IC5</td>
<td>Solothurn</td>
<td>2023-06-06 07:34:00</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1764</td>
<td>SBB</td>
<td>IC5</td>
<td>Oensingen</td>
<td>2023-06-06 07:46:00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1765</td>
<td>SBB</td>
<td>IC5</td>
<td>Olten</td>
<td>2023-06-06 07:59:00</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1766</td>
<td>SBB</td>
<td>IC5</td>
<td>Zürich HB</td>
<td>2023-06-06 08:33:00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1767</td>
<td>SBB</td>
<td>IC5</td>
<td>Zürich Flughafen</td>
<td>2023-06-06 08:43:00</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1768</td>
<td>SBB</td>
<td>IC5</td>
<td>Winterthur</td>
<td>2023-06-06 08:59:00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1769</td>
<td>SBB</td>
<td>IC5</td>
<td>St. Gallen</td>
<td>NaT</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>This is a train that goes from Lausanne to St.Gallen with many stops in-between. In St.Gallen the <code>ABFAHRTSZEIT</code> is missing as that “Fahrt” ends there (the train will most likely go back in the other direction, but that will be a new “Fahrt”).</p>
<p>We now have enough knowledge about the data that we can extract the edges in a for loop. Basically, what we do is to loop over the rows of a given “Fahrt”, starting with the second row and extracting the edges as</p>
<p><code>(previous station, current station, travel time between stations)</code>.</p>
<p>The Python code for this looks as follows:</p>
<div id="bead9a6f" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Empty list</span></span>
<span id="cb33-2">edgelist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Variables to store previous row and its index</span></span>
<span id="cb33-5">prev_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb33-6">prev_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb33-7"></span>
<span id="cb33-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over rows of dataframe</span></span>
<span id="cb33-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df_sorted.iterrows():</span>
<span id="cb33-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only start with second row</span></span>
<span id="cb33-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only if the two rows belong to the same Fahrt</span></span>
<span id="cb33-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> prev_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> prev_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]:</span>
<span id="cb33-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add edge to edgelist assuming it's a directed edge</span></span>
<span id="cb33-14">        edgelist.append((prev_row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BEZEICHNUNG_OFFIZIELL'</span>], </span>
<span id="cb33-15">                         row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BEZEICHNUNG_OFFIZIELL'</span>], </span>
<span id="cb33-16">                         (row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ANKUNFTSZEIT'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> prev_row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ABFAHRTSZEIT'</span>]).total_seconds() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>))</span>
<span id="cb33-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set current row and row index to previous ones</span></span>
<span id="cb33-18">    prev_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb33-19">    prev_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row</span></code></pre></div>
</div>
<p>To get a better idea, let’s have a look at the first list element:</p>
<div id="93fefdeb" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First list element</span></span>
<span id="cb34-2">edgelist[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>('Schaffhausen', 'Basel Bad Bf', 75.0)</code></pre>
</div>
</div>
<p>We are still not quite done yet. The problem is that the <code>edgelist</code> contains many duplicated entries as, for example, the stretch Olten - Zürich HB is served by many different trains on a given day.</p>
<p>What we want to do is to go through all possible edges and sum up the number of times they occur. In addition, we would like to average the travel time between a given pair of stations over all trips between the two stations. The following code does exactly that and saves the result in the form of a dictionary.</p>
<div id="84a486b0" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Empty dict</span></span>
<span id="cb36-2">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb36-3"></span>
<span id="cb36-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over elements in edgelist</span></span>
<span id="cb36-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> edgelist:</span>
<span id="cb36-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create key</span></span>
<span id="cb36-7">    key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb36-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get previous entries in dict (if there are any)</span></span>
<span id="cb36-9">    prev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> edges.get(key, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb36-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update values in dict</span></span>
<span id="cb36-11">    edges[key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (prev[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, prev[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb36-12"></span>
<span id="cb36-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Divide summed up travel times by number of trips</span></span>
<span id="cb36-14">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k: (v[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(v[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>v[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> edges.items()}</span></code></pre></div>
</div>
<p>Let’s look at the entry for the stretch between Schaffhausen and Basel Badischer Bahnhof again:</p>
<div id="3cc8911c" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Look at some element in dict</span></span>
<span id="cb37-2">edges[(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Schaffhausen'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Basel Bad Bf'</span>)]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<pre><code>(17, 73.18)</code></pre>
</div>
</div>
<p>There are 17 trips between these two stations (in this direction) and they take 73 minutes on average.</p>
<p>We are now ready to create the final node list (and export it). First, we add the two missing stations to the dataframe <code>ds</code> (above we only added them to the merged <code>df</code>, not <code>ds</code>). Then we reduce <code>ds</code> to the train stations that appear in the edges (it still contains many bus and tram stops and other things). Finally, we give it nicer column names.</p>
<div id="7b7123de" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add two missing places to ds</span></span>
<span id="cb39-2">ds.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ds)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8502183</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Oberkulm Post'</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.1197</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">47.30414</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">483.0</span>]</span>
<span id="cb39-3">ds.loc[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ds)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8505498</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Borgnone-Cadanza'</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.62254</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">46.15853</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">713.0</span>]</span>
<span id="cb39-4"></span>
<span id="cb39-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set of stations that appear in edgelist</span></span>
<span id="cb39-6">stations_in_edgelist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(edges.keys()), ()))</span>
<span id="cb39-7"></span>
<span id="cb39-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reduces nodes dataframe to only places in edgelist</span></span>
<span id="cb39-9">nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds[ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BEZEICHNUNG_OFFIZIELL'</span>].isin(stations_in_edgelist)]</span>
<span id="cb39-10"></span>
<span id="cb39-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Better column names</span></span>
<span id="cb39-12">nodes.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BPUIC'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STATION_NAME'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LONGITUDE'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LATITUDE'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ELEVATION'</span>]</span>
<span id="cb39-13"></span>
<span id="cb39-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have a look</span></span>
<span id="cb39-15">nodes.head()</span>
<span id="cb39-16"></span>
<span id="cb39-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export node list</span></span>
<span id="cb39-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nodes.sort_values("BPUIC").to_csv("nodelist.csv", sep = ';', encoding = 'utf-8', index = False)</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">BPUIC</th>
<th data-quarto-table-cell-role="th">STATION_NAME</th>
<th data-quarto-table-cell-role="th">LONGITUDE</th>
<th data-quarto-table-cell-role="th">LATITUDE</th>
<th data-quarto-table-cell-role="th">ELEVATION</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">2375</td>
<td>8500329</td>
<td>Koblenz</td>
<td>8.227050</td>
<td>47.600338</td>
<td>320.3</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2431</td>
<td>8503093</td>
<td>Zürich Manegg</td>
<td>8.519751</td>
<td>47.338009</td>
<td>430.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">3816</td>
<td>8508208</td>
<td>Trubschachen</td>
<td>7.846142</td>
<td>46.921700</td>
<td>732.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4013</td>
<td>8503290</td>
<td>Biberegg</td>
<td>8.669443</td>
<td>47.093610</td>
<td>933.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4102</td>
<td>8502271</td>
<td>Wohlen Oberdorf</td>
<td>8.286887</td>
<td>47.346852</td>
<td>433.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Before we export the edges, we change the station names in the edgelist to the BPUIC to make the edges more compact. Then we transform the dictionary into a dataframe which can finally be exported.</p>
<div id="6b02cbeb" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a node dict with BPUIC as values</span></span>
<span id="cb40-2">node_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(nodes.STATION_NAME, nodes.BPUIC))</span>
<span id="cb40-3"></span>
<span id="cb40-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Transform edge dict to nested list and replace all station names with their BPUIC</span></span>
<span id="cb40-5">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[node_dict[k[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]], node_dict[k[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], v[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], v[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> edges.items()]</span>
<span id="cb40-6"></span>
<span id="cb40-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dataframe</span></span>
<span id="cb40-8">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(edges, columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BPUIC1'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BPUIC2'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NUM_CONNECTIONS'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AVG_DURATION'</span>])</span>
<span id="cb40-9"></span>
<span id="cb40-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have a look</span></span>
<span id="cb40-11">edges.head()</span>
<span id="cb40-12"></span>
<span id="cb40-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export edge list</span></span>
<span id="cb40-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># edges.to_csv("edgelist.csv", sep = ';', encoding = 'utf-8', index = False)</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="29">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">BPUIC1</th>
<th data-quarto-table-cell-role="th">BPUIC2</th>
<th data-quarto-table-cell-role="th">NUM_CONNECTIONS</th>
<th data-quarto-table-cell-role="th">AVG_DURATION</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>8503424</td>
<td>8500090</td>
<td>17</td>
<td>73.18</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>8500090</td>
<td>8503424</td>
<td>18</td>
<td>72.39</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>8503000</td>
<td>8500010</td>
<td>35</td>
<td>54.00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>8500010</td>
<td>8500090</td>
<td>68</td>
<td>6.06</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>8500090</td>
<td>8500010</td>
<td>73</td>
<td>6.33</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Feel free to download the final results: <a href="nodelist.csv" download="">Nodelist (CSV)</a> and <a href="edgelist.csv" download="">Edgelist (CSV)</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://martinsterchi.ch/blog/sbb_nw/Untitled.svg" class="img-fluid figure-img" width="850"></p>
<figcaption>The Swiss railway network with a geographic layout (created using Gephi).</figcaption>
</figure>
</div>


</section>

 ]]></description>
  <category>Networks</category>
  <guid>https://martinsterchi.ch/blog/sbb_nw/</guid>
  <pubDate>Fri, 28 Feb 2025 00:00:00 GMT</pubDate>
  <media:content url="https://martinsterchi.ch/blog/sbb_nw/signet.svg" medium="image" type="image/svg+xml"/>
</item>
</channel>
</rss>
