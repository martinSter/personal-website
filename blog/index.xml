<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Martin Sterchi</title>
<link>https://martinsterchi.ch/blog/</link>
<atom:link href="https://martinsterchi.ch/blog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.43</generator>
<lastBuildDate>Tue, 01 Apr 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>SBB Network Analysis - Part 3</title>
  <dc:creator>Martin Sterchi</dc:creator>
  <link>https://martinsterchi.ch/blog/sbb_nw3/</link>
  <description><![CDATA[ 




<p>After <a href="../../blog/sbb_nw/index.html">Part 1</a> and <a href="../../blog/sbb_nw2/index.html">Part 2</a>, where I demonstrated how to create different versions of static networks, I now want to show how to construct a temporal network representation of the Swiss railway network. If you’ve followed along with the first two parts of this series, the code here should be easy to understand.</p>
<p>The temporal network representation I develop here is based on the <strong>space-of-changes</strong> approach. In this representation, a <em>directed</em> edge connects each station to all subsequent stations for a given “Fahrt.” Instead of aggregating edges between the same pairs of stations, we retain all edges at different points in time, storing both the start time of each edge, <img src="https://latex.codecogs.com/png.latex?t">, and the time required to traverse it, <img src="https://latex.codecogs.com/png.latex?%5Cdelta%20t">. This is just one possible way to represent temporal edges (see, for instance, the 2012 overview paper by <a href="https://doi.org/10.1016/j.physrep.2012.03.001">Petter Holme and Jari Saramäki</a>).</p>
<p>With this temporal network model, finding <strong>time-respecting paths</strong> between any two nodes closely mirrors what the SBB (Swiss railway) app does when searching for the fastest connections between stations.</p>
<p>But let’s start the practical part now.</p>
<div id="0ab787f4" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Counter, defaultdict</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check versions of libraries.</span></span>
<span id="cb1-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pandas version:"</span>, pd.__version__)</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure there is no limit on the number of columns shown.</span></span>
<span id="cb1-8">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Pandas version: 2.1.4</code></pre>
</div>
</div>
<section id="temporal-edgelist" class="level3">
<h3 class="anchored" data-anchor-id="temporal-edgelist">Temporal edgelist</h3>
<p>As for the <em>space-of-changes</em> representation, we start by loading the already processed “Ist-Daten” from <a href="../../blog/sbb_nw/index.html">Part 1</a> and transform all date-time elements into the right format. Also, we only need a few of the columns, so we reduce the dataframe drastically to only 4 columns.</p>
<div id="070d9c23" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the processed IST-DATEN.</span></span>
<span id="cb3-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ist-daten.csv'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>, low_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert BETRIEBSTAG to date format</span></span>
<span id="cb3-5">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BETRIEBSTAG'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BETRIEBSTAG'</span>])</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert ANKUNFTSZEIT, AN_PROGNOSE, ABFAHRTSZEIT, AB_PROGNOSE to datetime format</span></span>
<span id="cb3-8">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ANKUNFTSZEIT'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ANKUNFTSZEIT'</span>])</span>
<span id="cb3-9">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AN_PROGNOSE'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AN_PROGNOSE'</span>])</span>
<span id="cb3-10">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ABFAHRTSZEIT'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ABFAHRTSZEIT'</span>])</span>
<span id="cb3-11">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AB_PROGNOSE'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AB_PROGNOSE'</span>])</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reduce to relevant columns.</span></span>
<span id="cb3-14">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FAHRT_BEZEICHNER"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STATION_NAME"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ANKUNFTSZEIT"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ABFAHRTSZEIT"</span>]]</span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check the dataframe.</span></span>
<span id="cb3-17">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">FAHRT_BEZEICHNER</th>
<th data-quarto-table-cell-role="th">STATION_NAME</th>
<th data-quarto-table-cell-role="th">ANKUNFTSZEIT</th>
<th data-quarto-table-cell-role="th">ABFAHRTSZEIT</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>80:800631:17230:000</td>
<td>Basel Bad Bf</td>
<td>2025-03-05 04:59:00</td>
<td>NaT</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>80:800631:17233:000</td>
<td>Basel Bad Bf</td>
<td>NaT</td>
<td>2025-03-05 06:07:00</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>80:800631:17234:000</td>
<td>Basel Bad Bf</td>
<td>2025-03-05 05:56:00</td>
<td>NaT</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>80:800631:17235:000</td>
<td>Basel Bad Bf</td>
<td>NaT</td>
<td>2025-03-05 06:43:00</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>80:800631:17236:000</td>
<td>Basel Bad Bf</td>
<td>2025-03-05 06:31:00</td>
<td>NaT</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>We now use almost the same function as for the <em>space-of-changes</em> representation in order to extract the edges between any station and all its subsequent stations in a given “Fahrt”.</p>
<p>The only difference is that we extract, as the third element of an edge, the start time measured in minutes since the start of the day (2025-03-05 00:00:00). So, a train that departs at one minute past midnight will have the start time 1, as the following code demonstrates:</p>
<div id="c3fbfe34" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">(pd.to_datetime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2025-03-05 00:01:00"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pd.to_datetime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2025-03-05 00:00:00"</span>)).total_seconds() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>1.0</code></pre>
</div>
</div>
<p>Here now the function that we will use to iterate over the “Fahrten”:</p>
<div id="e5c97b9e" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to compute (directed) edges according to spaces-of-changes principle.</span></span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_edges_in_groups(group):</span>
<span id="cb6-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Empty list for results of a group.</span></span>
<span id="cb6-4">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over all rows in group.</span></span>
<span id="cb6-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(group)):</span>
<span id="cb6-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nested loop over all subsequent rows.</span></span>
<span id="cb6-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(group)):</span>
<span id="cb6-9">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now, append edge to results list.</span></span>
<span id="cb6-10">            results.append((</span>
<span id="cb6-11">                group.iloc[i][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STATION_NAME"</span>], <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Station of origin</span></span>
<span id="cb6-12">                group.iloc[j][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STATION_NAME"</span>], <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Station of destination</span></span>
<span id="cb6-13">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Time of departure in minutes since the day began.</span></span>
<span id="cb6-14">                (group.iloc[i][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ABFAHRTSZEIT"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pd.to_datetime(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2025-03-05 00:00:00"</span>)).total_seconds() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>,</span>
<span id="cb6-15">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Duration in minutes.</span></span>
<span id="cb6-16">                (group.iloc[j][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ANKUNFTSZEIT'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> group.iloc[i][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ABFAHRTSZEIT'</span>]).total_seconds() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb6-17">            ))</span>
<span id="cb6-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return list.</span></span>
<span id="cb6-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> results</span></code></pre></div>
</div>
<p>This function is applied as before for the <em>space-of-changes</em> representation:</p>
<div id="8390d595" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now apply that function group-wise.</span></span>
<span id="cb7-2">edges_series <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FAHRT_BEZEICHNER"</span>, group_keys<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(get_edges_in_groups)</span></code></pre></div>
</div>
<p>We can check the same “Fahrt” between Yverdon-les-Bains and Ste-Croix again.</p>
<div id="0888d8b0" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's check out one FAHRT.</span></span>
<span id="cb8-2">edges_series[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"85:97:9:000"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>[('Yverdon-les-Bains', 'Vuiteboeuf', 333.0, 10.0),
 ('Yverdon-les-Bains', 'Baulmes', 333.0, 14.0),
 ('Yverdon-les-Bains', 'Six-Fontaines', 333.0, 18.0),
 ('Yverdon-les-Bains', 'Ste-Croix', 333.0, 33.0),
 ('Vuiteboeuf', 'Baulmes', 343.0, 4.0),
 ('Vuiteboeuf', 'Six-Fontaines', 343.0, 8.0),
 ('Vuiteboeuf', 'Ste-Croix', 343.0, 23.0),
 ('Baulmes', 'Six-Fontaines', 347.0, 4.0),
 ('Baulmes', 'Ste-Croix', 347.0, 19.0),
 ('Six-Fontaines', 'Ste-Croix', 351.0, 15.0)]</code></pre>
</div>
</div>
<p>That train starts at 333 minutes past midnight (which is 05:33). The durations are the same as before in the <em>space-of-changes</em> representation.</p>
<p>The final step before getting the data ready for the export is to flatten all the edges that are currently organized in the form of a Pandas series of lists.</p>
<div id="477f5a6b" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten the result into one edgelist.</span></span>
<span id="cb10-2">edgelist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> edges_series.values <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> l]</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of edges:"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(edgelist))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of edges: 1110766</code></pre>
</div>
</div>
<p>The <em>space-of-changes</em> representation code now aggregated duplicate edges. Crucially, this step is omitted here as we want to keep the temporal represenation of edges. Thus, our temporal representation of the network will have 1’110’766 edges.</p>
<p>The final steps are easy: we change the station names to their BPUIC numbers, we convert both the start time and the duration of an edge to integer values, and we export the dataframe as a CSV file.</p>
<div id="c887262c" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the nodelist.</span></span>
<span id="cb12-2">nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nodelist.csv"</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>)</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a node dict with BPUIC as values</span></span>
<span id="cb12-5">node_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(nodes.STATION_NAME, nodes.BPUIC))</span></code></pre></div>
</div>
<div id="150010b0" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Transform edge dict to nested list and replace all station names with their BPUIC</span></span>
<span id="cb13-2">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[node_dict[e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]], node_dict[e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> e <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> edgelist]</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dataframe</span></span>
<span id="cb13-5">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(edges, columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BPUIC1'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BPUIC2'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'START'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DURATION'</span>])</span>
<span id="cb13-6"></span>
<span id="cb13-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have a look</span></span>
<span id="cb13-8">edges.head()</span>
<span id="cb13-9"></span>
<span id="cb13-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export edge list</span></span>
<span id="cb13-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># edges.to_csv("edgelist_temporal.csv", sep = ';', encoding = 'utf-8', index = False)</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">BPUIC1</th>
<th data-quarto-table-cell-role="th">BPUIC2</th>
<th data-quarto-table-cell-role="th">START</th>
<th data-quarto-table-cell-role="th">DURATION</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>8503000</td>
<td>8500010</td>
<td>1294</td>
<td>54</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>8503000</td>
<td>8500090</td>
<td>1294</td>
<td>105</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>8500010</td>
<td>8500090</td>
<td>1393</td>
<td>6</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>8500090</td>
<td>8500010</td>
<td>1813</td>
<td>7</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>8500090</td>
<td>8503000</td>
<td>1813</td>
<td>112</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>You can download the result here: <a href="edgelist_temporal.csv" download="">Temporal Edgelist (CSV)</a>.</p>
</section>
<section id="references" class="level3">
<h3 class="anchored" data-anchor-id="references">References</h3>
<p>Holme, P., &amp; Saramäki, J. (2012). Temporal networks. <em>Physics Reports</em>, 519(3), 97-125. <a href="https://doi.org/10.1016/j.physrep.2012.03.001" class="uri">https://doi.org/10.1016/j.physrep.2012.03.001</a></p>
<p><em>The title image has been created by Wikimedia user JoachimKohler-HB and is licensed under <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.en">Creative Commons</a>.</em></p>


</section>

 ]]></description>
  <category>Networks</category>
  <guid>https://martinsterchi.ch/blog/sbb_nw3/</guid>
  <pubDate>Tue, 01 Apr 2025 00:00:00 GMT</pubDate>
  <media:content url="https://martinsterchi.ch/blog/sbb_nw3/sbb_hb.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>SBB Network Analysis - Part 2</title>
  <dc:creator>Martin Sterchi</dc:creator>
  <link>https://martinsterchi.ch/blog/sbb_nw2/</link>
  <description><![CDATA[ 




<p>In <a href="../../blog/sbb_nw/index.html">Part 1</a> of this series on the Swiss train network, I demonstrated how to construct a directed network where nodes represent stations, and a directed edge exists whenever at least one nonstop train connection links two stations.</p>
<p>For some time, I believed this was the most intuitive graph representation for this context. However, after reading an insightful 2006 paper by <a href="https://arxiv.org/abs/physics/0510151">Maciej Kurant and Patrick Thiran</a>, I discovered that public transport networks can be represented in (at least) three distinct ways. The graph representation I introduced in <a href="../../blog/sbb_nw/index.html">Part 1</a> aligns with what they call the <strong>space-of-stops</strong> representation.</p>
<p>Yet, depending on the specific questions being asked, two other graph representations can also be useful. In the <strong>space-of-changes</strong> representation proposed by Kurant and Thiran (2006), an edge exists between any two stations connected by a train on a given “Fahrt”, even if the train makes stops at other stations in between.</p>
<p>The third representation, <strong>space-of-stations</strong>, includes an undirected edge between two stations only if they are directly connected by railway tracks, with no other station in between. This approach offers a more infrastructure-focused perspective on the network.</p>
<p>Crucially, all three representations share the same set of nodes—namely, all active train stations. What differs is how the edges are defined.</p>
<p>Kurant and Thiran (2006) also highlight how the shortest path length is interpreted differently in each representation:</p>
<ul>
<li><em>space-of-stops</em>: The number of train stops on a journey between two stations.</li>
<li><em>space-of-changes</em>: The number of times a traveler must change trains between two stations.</li>
<li><em>space-of-stations</em>: The number of stations passed through between two stations.</li>
</ul>
<p>Lastly, they point out an important subgraph relationship among these representations: <em>space-of-stations</em> is a subgraph of <em>space-of-stops</em>, which in turn is a subgraph of <em>space-of-changes</em>.</p>
<p>As always, we begin the practical part with loading the libraries we are going to use.</p>
<div id="0ba0bc9e" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> geopy.distance</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Counter, defaultdict</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check versions of libraries.</span></span>
<span id="cb1-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pandas version:"</span>, pd.__version__)</span>
<span id="cb1-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Numpy version:"</span>, np.__version__)</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure there is no limit on the number of columns shown.</span></span>
<span id="cb1-11">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Pandas version: 2.1.4
Numpy version: 1.26.4</code></pre>
</div>
</div>
<p>We first present how the <em>space-of-changes</em> representation can be extracted. After that we show one way of finding the edges for the <em>space-of-stations</em> representation.</p>
<section id="space-of-changes" class="level3">
<h3 class="anchored" data-anchor-id="space-of-changes">Space-of-changes</h3>
<p>We start by importing the already processed “Ist-Daten” from <a href="../../blog/sbb_nw/index.html">Part 1</a>. Since we load them from a CSV file we have to transform all date-time information into the Pandas datetime format.</p>
<div id="9695c3a1" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the processed IST-DATEN.</span></span>
<span id="cb3-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ist-daten.csv'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>, low_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert BETRIEBSTAG to date format</span></span>
<span id="cb3-5">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BETRIEBSTAG'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BETRIEBSTAG'</span>])</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert ANKUNFTSZEIT, AN_PROGNOSE, ABFAHRTSZEIT, AB_PROGNOSE to datetime format</span></span>
<span id="cb3-8">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ANKUNFTSZEIT'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ANKUNFTSZEIT'</span>])</span>
<span id="cb3-9">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AN_PROGNOSE'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AN_PROGNOSE'</span>])</span>
<span id="cb3-10">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ABFAHRTSZEIT'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ABFAHRTSZEIT'</span>])</span>
<span id="cb3-11">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AB_PROGNOSE'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AB_PROGNOSE'</span>])</span></code></pre></div>
</div>
<p>Next comes the key part of extracting the edges for the <em>space-of-changes</em> representation. We will group the rows by <code>FAHRT_BEZEICHNER</code>. Then, we will use two nested loops to create edges between any station and all subsequent stations on a given “Fahrt”. Note that in contrast to Kurant and Thiran (2006) we will extract <em>directed</em> edges. The following function specifies how the edges can be extracted for one group. It’s not very performant code and there may be smarter and more efficient ways of doing this. But it does the job.</p>
<div id="23f60b1e" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to compute (directed) edges according to spaces-of-changes principle.</span></span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_edges_in_groups(group):</span>
<span id="cb4-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Empty list for results of a group.</span></span>
<span id="cb4-4">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb4-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over all rows in group.</span></span>
<span id="cb4-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(group)):</span>
<span id="cb4-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Nested loop over all subsequent rows.</span></span>
<span id="cb4-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(group)):</span>
<span id="cb4-9">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now, append edge to results list.</span></span>
<span id="cb4-10">            results.append((</span>
<span id="cb4-11">                group.iloc[i][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STATION_NAME"</span>], <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Station of origin</span></span>
<span id="cb4-12">                group.iloc[j][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STATION_NAME"</span>], <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Station of destination</span></span>
<span id="cb4-13">                (group.iloc[j][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ANKUNFTSZEIT'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> group.iloc[i][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ABFAHRTSZEIT'</span>]).total_seconds() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Time (minutes)</span></span>
<span id="cb4-14">            ))</span>
<span id="cb4-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return list.</span></span>
<span id="cb4-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> results</span></code></pre></div>
</div>
<p>We can now apply that function to every group. On my machine, this step took roughly 10 minutes.</p>
<div id="d77f921f" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now apply that function group-wise.</span></span>
<span id="cb5-2">edges_series <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"FAHRT_BEZEICHNER"</span>, group_keys<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(get_edges_in_groups)</span></code></pre></div>
</div>
<p>The output of the previous step is a Pandas series, as the following check confirms. We can see that every element of that series is identified with <code>FAHRT_BEZEICHNER</code> and contains a list with the edges, also including the time between the two nodes.</p>
<div id="ddbabe91" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure the result is a pandas series.</span></span>
<span id="cb6-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Is pandas series:"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(edges_series, pd.Series))</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check first few elements:</span></span>
<span id="cb6-5">edges_series.head()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Is pandas series: True</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>FAHRT_BEZEICHNER
60402-NZ-8503000-213400    [(Zürich HB, Basel SBB, 54.0), (Zürich HB, Bas...
60403-NZ-8400058-191500    [(Basel Bad Bf, Basel SBB, 7.0), (Basel Bad Bf...
60408-NZ-8098160-205700    [(Basel Bad Bf, Basel SBB, 8.0), (Basel Bad Bf...
60409-NZ-8503000-195900    [(Zürich HB, Basel SBB, 54.0), (Zürich HB, Bas...
60470-NZ-8503000-205900    [(Zürich HB, Basel SBB, 54.0), (Zürich HB, Bas...
dtype: object</code></pre>
</div>
</div>
<p>We perform another quick check to make sure the series contains as many elements as there are unique <code>FAHRT_BEZEICHNER</code> strings. That seems to be the case.</p>
<div id="70328b7d" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># How many elements?</span></span>
<span id="cb9-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of elements in series:"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(edges_series))</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Is that the number of distinct FAHRTEN?</span></span>
<span id="cb9-5">df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FAHRT_BEZEICHNER'</span>]].nunique()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of elements in series: 15005</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>FAHRT_BEZEICHNER    15005
dtype: int64</code></pre>
</div>
</div>
<p>We quickly check the list of edges for one “Fahrt” to make sure it really extracted the edges in the right way.</p>
<div id="011d813d" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's check out one FAHRT.</span></span>
<span id="cb12-2">edges_series[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"85:97:9:000"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>[('Yverdon-les-Bains', 'Vuiteboeuf', 10.0),
 ('Yverdon-les-Bains', 'Baulmes', 14.0),
 ('Yverdon-les-Bains', 'Six-Fontaines', 18.0),
 ('Yverdon-les-Bains', 'Ste-Croix', 33.0),
 ('Vuiteboeuf', 'Baulmes', 4.0),
 ('Vuiteboeuf', 'Six-Fontaines', 8.0),
 ('Vuiteboeuf', 'Ste-Croix', 23.0),
 ('Baulmes', 'Six-Fontaines', 4.0),
 ('Baulmes', 'Ste-Croix', 19.0),
 ('Six-Fontaines', 'Ste-Croix', 15.0)]</code></pre>
</div>
</div>
<p>This seems to be a train that goes from Yverdon-les-Bains to Ste-Croix. It stops in Vuiteboeuf, Baulmes, and Six-Fontaines before getting to Ste-Croix. There is an edge between every station and all its subsequent stations on that “Fahrt”. This is exactly what we wanted.</p>
<p>Now, we flatten the Pandas series of lists into one edgelist.</p>
<div id="8acb2a0b" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Flatten the result into one edgelist.</span></span>
<span id="cb14-2">edgelist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> edges_series.values <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> l]</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of edges:"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(edgelist))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of edges: 1110766</code></pre>
</div>
</div>
<p>This edgelist contains over one million edges. Note, however, that many of them are duplicates as we looped over all “Fahrten” of a given day. As in <a href="../../blog/sbb_nw/index.html">Part 1</a>, we will now aggregate all duplicate edges, counting the number of connections and the average travel time between any two nodes.</p>
<div id="8500bdce" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Empty dict</span></span>
<span id="cb16-2">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over elements in edgelist</span></span>
<span id="cb16-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> edgelist:</span>
<span id="cb16-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create key</span></span>
<span id="cb16-7">    key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb16-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get previous entries in dict (if there are any)</span></span>
<span id="cb16-9">    prev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> edges.get(key, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb16-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update values in dict</span></span>
<span id="cb16-11">    edges[key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (prev[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, prev[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb16-12"></span>
<span id="cb16-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Divide summed up travel times by number of trips</span></span>
<span id="cb16-14">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k: (v[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(v[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>v[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> edges.items()}</span>
<span id="cb16-15"></span>
<span id="cb16-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of edges:"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(edges))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of edges: 37947</code></pre>
</div>
</div>
<p>We are left with 37’947 directed and weighted edges that are currently stored in a dict called <code>edges</code>. Let’s see how long it takes to get from Olten to Winterthur and how many connections there are on a given day:</p>
<div id="863aeb0b" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Test</span></span>
<span id="cb18-2">edges[(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Olten"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Winterthur"</span>)]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>(25, 63.84)</code></pre>
</div>
</div>
<p>I can travel from Olten to Winterthur 25 times per day (without having to change trains) and the trip takes a bit more than an hour.</p>
<p>Now, there is still a small problem (which I acutally only found out about after creating a network with <code>networkX</code>): there are two self-loops!</p>
<div id="a8de4da2" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(edges[(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Monthey-En Place"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Monthey-En Place"</span>)])</span>
<span id="cb20-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(edges[(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Les Planches (Aigle)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Les Planches (Aigle)"</span>)])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(47, 9.87)
(36, 9.22)</code></pre>
</div>
</div>
<p>I checked the trips in which these stations occur and the trips actually do visit the same station twice. So, our code did the right thing, these are just two odd trips. I decided to remove those two edges:</p>
<div id="a5c5ad93" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the two self-loops</span></span>
<span id="cb22-2">edges.pop((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Les Planches (Aigle)"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Les Planches (Aigle)"</span>))</span>
<span id="cb22-3">edges.pop((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Monthey-En Place"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Monthey-En Place"</span>))</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>(47, 9.87)</code></pre>
</div>
</div>
<p>Now, we import the nodelist from <a href="../../blog/sbb_nw/index.html">Part 1</a> so that we can replace the station names in the edges by the BPUIC identifiers.</p>
<div id="079897ff" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the nodelist.</span></span>
<span id="cb24-2">nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nodelist.csv"</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>)</span>
<span id="cb24-3"></span>
<span id="cb24-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a node dict with BPUIC as values</span></span>
<span id="cb24-5">node_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(nodes.STATION_NAME, nodes.BPUIC))</span></code></pre></div>
</div>
<p>After changing all stations names to BPUIC numbers we create a dataframe that can then be exported as a CSV file. Yay, we’re done!</p>
<div id="518d397e" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Transform edge dict to nested list and replace all station names with their BPUIC</span></span>
<span id="cb25-2">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[node_dict[k[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]], node_dict[k[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], v[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], v[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> edges.items()]</span>
<span id="cb25-3"></span>
<span id="cb25-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dataframe</span></span>
<span id="cb25-5">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(edges, columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BPUIC1'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BPUIC2'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NUM_CONNECTIONS'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AVG_DURATION'</span>])</span>
<span id="cb25-6"></span>
<span id="cb25-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have a look</span></span>
<span id="cb25-8">edges.head()</span>
<span id="cb25-9"></span>
<span id="cb25-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export edge list</span></span>
<span id="cb25-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># edges.to_csv("edgelist_SoCha.csv", sep = ';', encoding = 'utf-8', index = False)</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">BPUIC1</th>
<th data-quarto-table-cell-role="th">BPUIC2</th>
<th data-quarto-table-cell-role="th">NUM_CONNECTIONS</th>
<th data-quarto-table-cell-role="th">AVG_DURATION</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>8503000</td>
<td>8500010</td>
<td>88</td>
<td>63.81</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>8503000</td>
<td>8500090</td>
<td>14</td>
<td>81.36</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>8500010</td>
<td>8500090</td>
<td>67</td>
<td>6.07</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>8500090</td>
<td>8500010</td>
<td>67</td>
<td>6.39</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>8500090</td>
<td>8503000</td>
<td>10</td>
<td>100.00</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>You can download the result here: <a href="edgelist_SoCha.csv" download="">Edgelist space-of-changes (CSV)</a>.</p>
</section>
<section id="space-of-stations" class="level3">
<h3 class="anchored" data-anchor-id="space-of-stations">Space-of-stations</h3>
<p>For the <em>space-of-stations</em> graph representation we make use of the fact that the <em>space-of-stations</em> graph should be a subgraph of the <em>space-of-stops</em> graph that we extracted in <a href="../../blog/sbb_nw/index.html">Part 1</a> with the latter containing additional edges that represent <strong>shortcuts</strong>. For example, the <em>space-of-stops</em> graph contains a directed edge from Olten to Basel SBB as there are nonstop trains between these two stations. However, there are also smaller, regional trains which stop at all stations in between. The key idea (also nicely shown by Kurant and Thiran) is to go through all edges in the <em>space-of-stops</em> graph and identify the ones that are shortcuts.</p>
<p>We first load the (<em>space-of-stops</em>) edgelist from <a href="../../blog/sbb_nw/index.html">Part 1</a> and add the station names.</p>
<div id="c2828862" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the space-of-stops edgelist.</span></span>
<span id="cb26-2">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"edgelist_SoSto.csv"</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>)</span>
<span id="cb26-3"></span>
<span id="cb26-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a node dict with station names as values.</span></span>
<span id="cb26-5">node_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(nodes.BPUIC, nodes.STATION_NAME))</span>
<span id="cb26-6"></span>
<span id="cb26-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add actual station names.</span></span>
<span id="cb26-8">edges[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STATION1"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [node_dict[v] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> edges[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BPUIC1"</span>]]</span>
<span id="cb26-9">edges[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STATION2"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [node_dict[v] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> edges[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BPUIC2"</span>]]</span>
<span id="cb26-10"></span>
<span id="cb26-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check out the dataframe.</span></span>
<span id="cb26-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(edges.head())</span>
<span id="cb26-13"></span>
<span id="cb26-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of edges in space-of-stops representation:"</span>, edges.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>    BPUIC1   BPUIC2  NUM_CONNECTIONS  AVG_DURATION      STATION1      STATION2
0  8503000  8500010               36         54.00     Zürich HB     Basel SBB
1  8500010  8500090               67          6.07     Basel SBB  Basel Bad Bf
2  8500090  8500010               67          6.39  Basel Bad Bf     Basel SBB
3  8500010  8503000               39         57.87     Basel SBB     Zürich HB
4  8506286  8506271               34          3.00     Appenzell     Gontenbad
Number of edges in space-of-stops representation: 4211</code></pre>
</div>
</div>
<p>For the <em>space-of-stations</em> representation, <strong>undirected</strong> edges make the most sense. Thus, we need to make the directed edges from the <em>space-of-stops</em> representation undirected and remove all duplicates that this introduces (e.g., ‘Olten - Basel SBB’ and ‘Basel SBB - Olten’). With a little help by ChatGPT I found an elegant solution to achieve just that.</p>
<p>More concretely, we iterate over the zip object containing the node pairs of all edges. The <code>min()</code> and <code>max()</code> functions applied to the station names will sort the station names alphabetically so that, for example, ‘Olten - Basel SBB’ and ‘Basel SBB - Olten’ are both transformed to ‘Basel SBB - Olten’. Finally, the <code>set()</code> function will get rid of all duplicates.</p>
<div id="048473f1" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get a list of unique undirected edges.</span></span>
<span id="cb28-2">unique_undirected_edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(e1, e2), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(e1, e2)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> e1, e2 <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(edges[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STATION1"</span>], edges[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STATION2"</span>])))</span>
<span id="cb28-3"></span>
<span id="cb28-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of unique undirected edges:"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(unique_undirected_edges))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of unique undirected edges: 2152</code></pre>
</div>
</div>
<p>This step leaves us with 2’152 undirected, unique edges.</p>
<section id="data-preprocessing-for-improved-efficiency" class="level4">
<h4 class="anchored" data-anchor-id="data-preprocessing-for-improved-efficiency">Data preprocessing for improved efficiency</h4>
<p>In order to make the procedure further below more efficient, we extract here all unique “Fahrten”. More specifically, we create a dictionary <code>fahrten</code> with the sequence of station names as key and the <code>FAHRT_BEZEICHNER</code> as value. Note that if a sequence of station names already exists as a key in the dict, then the value belonging to that key will be overwritten with the new <code>FAHRT_BEZEICHNER</code> but that doesn’t bother us since we just want to be able to extract one example “Fahrt” per unique sequence of stops.</p>
<div id="e825f4a0" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Empty dict</span></span>
<span id="cb30-2">fahrten <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb30-3"></span>
<span id="cb30-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over grouped df.</span></span>
<span id="cb30-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If the same key (sequence of stops) reappears, the value will be overwritte.</span></span>
<span id="cb30-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># But that behavior is desired: we only want to keep one FAHRT_BEZEICHNER per key.</span></span>
<span id="cb30-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fahrt, group <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FAHRT_BEZEICHNER'</span>):</span>
<span id="cb30-8">    fahrten[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(group[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STATION_NAME'</span>])] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fahrt</span>
<span id="cb30-9"></span>
<span id="cb30-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of unique 'Fahrten':"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(fahrten))</span>
<span id="cb30-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of 'Fahrten' in whole dataframe:"</span>, df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FAHRT_BEZEICHNER'</span>].nunique())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of unique 'Fahrten': 1686
Number of 'Fahrten' in whole dataframe: 15005</code></pre>
</div>
</div>
<p>We can see from the above output that this step drastically reduces the “Fahrten” that we will iterate over later.</p>
<p>In the following code chunk we filter the “Ist-Daten” (<code>df</code>) loaded earlier so that only the unique “Fahrten” are left.</p>
<div id="e7f99b5b" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reduce the dataframe to the 'Fahrten' in list of values of dict.</span></span>
<span id="cb32-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FAHRT_BEZEICHNER'</span>].isin(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(fahrten.values()))]</span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Remaining number of rows:"</span>, df.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Remaining number of rows: 17603</code></pre>
</div>
</div>
<p>Another little trick to make things more efficent later is to create a dictionary with station names as keys and a list with all <code>FAHRT_BEZEICHNER</code> strings a station name is part of as values (kind of an <em>inverted index</em>).</p>
<div id="74232726" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># defaultdict with lists</span></span>
<span id="cb34-2">result_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)</span>
<span id="cb34-3"></span>
<span id="cb34-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Iterate over rows</span></span>
<span id="cb34-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df.iterrows():</span>
<span id="cb34-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dict with stations as keys and FAHRT_BEZEICHNER as values.</span></span>
<span id="cb34-7">    result_dict[row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STATION_NAME'</span>]].append(row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FAHRT_BEZEICHNER'</span>])</span>
<span id="cb34-8"></span>
<span id="cb34-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert back to normal dict.</span></span>
<span id="cb34-10">result_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(result_dict)</span></code></pre></div>
</div>
</section>
<section id="identify-shortcuts" class="level4">
<h4 class="anchored" data-anchor-id="identify-shortcuts">Identify shortcuts</h4>
<p>Next, we perform the key step in extracting the edges for the <em>space-of-stations</em> representation: we need to identify all edges that are shortcuts, passing train stations without stopping.</p>
<p>We first define a custom function that determines whether any two station names <code>a</code> and <code>b</code> are adjacent in a sequence (list) of station names <code>lst</code>.</p>
<div id="67f307fb" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to check whether elements a and b are NOT adjacent in lst.</span></span>
<span id="cb35-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> is_shortcut(lst, a, b):</span>
<span id="cb35-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>((x, y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> (a, b) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> (x, y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> (b, a) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x, y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(lst, lst[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]))</span></code></pre></div>
</div>
<p>Then, we iterate over all undirected, unique edges that we prepared above. For each edge we go through the following steps:</p>
<ol type="1">
<li>We get the <code>FAHRT_BEZEICHNER</code> strings for all “Fahrten” which both nodes of the edge are part of. For this we use the <em>inverted index</em>-style dictionary we created above.</li>
<li>Then we perform an inner loop over the “Fahrten” extracted in the first step.
<ul>
<li>We first extract the sequence of stations of a “Fahrt”.</li>
<li>We use our custom function from above to check whether the two nodes are adjacent in the sequence of stations.</li>
<li>If they are not adjacent, i.e., the edge represents a shortcut, then we save that edge and break the inner loop and move on to the next edge.</li>
</ul></li>
</ol>
<div id="e56ae934" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Empty list for shortcuts.</span></span>
<span id="cb36-2">shortcut_edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb36-3"></span>
<span id="cb36-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over list of undirected edges.</span></span>
<span id="cb36-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, edge <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(unique_undirected_edges):</span>
<span id="cb36-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find all 'Fahrten' in which both stations of the edge appear.</span></span>
<span id="cb36-7">    intersection <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(result_dict[edge[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(result_dict[edge[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]))</span>
<span id="cb36-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize shortcut to False</span></span>
<span id="cb36-9">    shortcut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb36-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over 'Fahrten' in which both stations of the edge appear.</span></span>
<span id="cb36-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> fahrt <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> intersection:</span>
<span id="cb36-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the sequence of stations in current 'Fahrt'.</span></span>
<span id="cb36-13">        seq_of_stations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.loc[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FAHRT_BEZEICHNER'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> fahrt, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STATION_NAME'</span>].tolist()</span>
<span id="cb36-14">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check whether the edge represents a shortcut in that sequence.</span></span>
<span id="cb36-15">        shortcut <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> is_shortcut(seq_of_stations, edge[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], edge[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb36-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># If it is a shortcut, we add it to the list and break the inner loop.</span></span>
<span id="cb36-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> shortcut:</span>
<span id="cb36-18">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add to list and break the loop.</span></span>
<span id="cb36-19">            shortcut_edges.append((fahrt, edge))</span>
<span id="cb36-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb36-21"></span>
<span id="cb36-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of shortcut edges:"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(shortcut_edges))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of shortcut edges: 443</code></pre>
</div>
</div>
<p>A total of 443 edges are identified as shortcuts. Let’s have a look at the first one:</p>
<div id="9c6a1f59" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check first shortcut.</span></span>
<span id="cb38-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(shortcut_edges[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb38-3"></span>
<span id="cb38-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check the 'Fahrt' in which it was detected as a shortcut.</span></span>
<span id="cb38-5">df.loc[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FAHRT_BEZEICHNER'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> shortcut_edges[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STATION_NAME'</span>]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>('ch:1:sjyid:100001:18776-001', ('Meilen', 'Männedorf'))</code></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>14911         Rapperswil SG
14912             Kempraten
14913              Feldbach
14914               Uerikon
14915                 Stäfa
14916             Männedorf
14917               Uetikon
14918                Meilen
14919    Zürich Stadelhofen
14920             Zürich HB
14921     Zürich Hardbrücke
14922       Zürich Oerlikon
14923               Opfikon
14924       Kloten Balsberg
14925                Kloten
14926           Bassersdorf
14927            Effretikon
14928            Winterthur
Name: STATION_NAME, dtype: object</code></pre>
</div>
</div>
<p>From the whole sequence of stations, we can see that the edge identified as a shortcut is, in fact, a connection that is not consecutive.</p>
<p>Finally, we remove the <code>FAHRT_BEZEICHNER</code> from <code>shortcut_edges</code> and create the final edge list without shortcuts.</p>
<div id="6ed9ca05" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract only edges</span></span>
<span id="cb41-2">shortcut_edges_clean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> shortcut_edges]</span>
<span id="cb41-3"></span>
<span id="cb41-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get the final list of non-shortcut edges.</span></span>
<span id="cb41-5">final_edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [e <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> e <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> unique_undirected_edges <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> e <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> shortcut_edges_clean]</span>
<span id="cb41-6"></span>
<span id="cb41-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of edges:"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(final_edges))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of edges: 1709</code></pre>
</div>
</div>
<p>We have a final number of edges of <img src="https://latex.codecogs.com/png.latex?2152-443=1709">.</p>
</section>
<section id="validate-with-liniendaten" class="level4">
<h4 class="anchored" data-anchor-id="validate-with-liniendaten">Validate with “Liniendaten”</h4>
<p>The extraction of the edges in the <em>space-of-stations</em> representation was a bit more complex than for <em>space-of-changes</em> or <em>space-of-stops</em>. That’s why I would like to run some checks.</p>
<p>We can validate some of the edges we extracted with another dataset from the <a href="https://data.sbb.ch/pages/home/">Open Data Portal of SBB</a>. The dataset <a href="https://data.sbb.ch/explore/dataset/linie-mit-betriebspunkten/information/">Linie (Betriebspunkte)</a> contains all railway “lines” maintained by SBB with all “Betriebspunkte” (including stations) that are located along these lines. Let’s load this dataset:</p>
<div id="df256ed3" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the data about "Linien mit Betriebspunkten"</span></span>
<span id="cb43-2">linien <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'linie-mit-betriebspunkten.csv'</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>)</span>
<span id="cb43-3"></span>
<span id="cb43-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reduce to relevant columns</span></span>
<span id="cb43-5">linien <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linien[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name Haltestelle"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linie"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KM"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linien Text"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BPUIC"</span>]]</span>
<span id="cb43-6"></span>
<span id="cb43-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shape of dataframe:"</span>, linien.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Shape of dataframe: (1884, 5)</code></pre>
</div>
</div>
<p>Let’s have a look:</p>
<div id="8f8b16b6" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have a look at the dataframe</span></span>
<span id="cb45-2">linien.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Name Haltestelle</th>
<th data-quarto-table-cell-role="th">Linie</th>
<th data-quarto-table-cell-role="th">KM</th>
<th data-quarto-table-cell-role="th">Linien Text</th>
<th data-quarto-table-cell-role="th">BPUIC</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Aarau</td>
<td>649</td>
<td>41.50577</td>
<td>Aarau - Woschnau Tunnel alt</td>
<td>8502113</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Aarberg</td>
<td>251</td>
<td>95.49304</td>
<td>Palezieux Est - Lyss Nord</td>
<td>8504404</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Aesch BL</td>
<td>230</td>
<td>113.00006</td>
<td>Delemont Est - Basel SBB Ost</td>
<td>8500117</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Aespli</td>
<td>455</td>
<td>92.76586</td>
<td>Unterhard BE - Aespli</td>
<td>8515299</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Aigle</td>
<td>100</td>
<td>39.31241</td>
<td>Lausanne - Simplon Tunnel I - Iselle</td>
<td>8501400</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>The rows in that dataset are not just stations but also other “Betriebspunkte” (important locations that are needed to run the infrastructure). But we can identify the stations among the “Betriebspunkte” by joining the <code>nodes</code> dataframe on BPUIC and only keeping the entries for which there was a matching row in <code>nodes</code>.</p>
<div id="ab6c9c91" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Join the rows of nodelist based on BPUIC.</span></span>
<span id="cb46-2">linien <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge(linien, nodes[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BPUIC"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STATION_NAME"</span>]], on <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BPUIC'</span>, how <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span>
<span id="cb46-3"></span>
<span id="cb46-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># How many entries have a missing value aka are not stations?</span></span>
<span id="cb46-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of non-stations:"</span>, linien[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STATION_NAME"</span>].isna().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>())</span>
<span id="cb46-6"></span>
<span id="cb46-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Drop all rows that are not stations.</span></span>
<span id="cb46-8">linien <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linien.dropna(subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STATION_NAME"</span>])</span>
<span id="cb46-9"></span>
<span id="cb46-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of remaining rows:"</span>, linien.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of non-stations: 979
Number of remaining rows: 905</code></pre>
</div>
</div>
<p>Next, we group the rows by <code>'Linie'</code> and sort them in ascending order by <code>'KM'</code> (where along the line is the “Betriebspunkt” located, in terms of kilometres) so that the stations for each line are sorted in the right order.</p>
<div id="719a3e41" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb48" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb48-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to sort entries within a group in ascending order of KM</span></span>
<span id="cb48-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sort_data(group):</span>
<span id="cb48-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> group.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'KM'</span>, ascending <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb48-4"></span>
<span id="cb48-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort for each group</span></span>
<span id="cb48-6">linien_sorted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linien.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Linie'</span>, group_keys<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(sort_data)</span>
<span id="cb48-7"></span>
<span id="cb48-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's have a look at Linie 290.</span></span>
<span id="cb48-9">linien_sorted.loc[linien_sorted[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Linie'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">290</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="27">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Name Haltestelle</th>
<th data-quarto-table-cell-role="th">Linie</th>
<th data-quarto-table-cell-role="th">KM</th>
<th data-quarto-table-cell-role="th">Linien Text</th>
<th data-quarto-table-cell-role="th">BPUIC</th>
<th data-quarto-table-cell-role="th">STATION_NAME</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">1351</td>
<td>Ostermundigen</td>
<td>290</td>
<td>110.76500</td>
<td>Bern Wylerfeld - Thun</td>
<td>8507002</td>
<td>Ostermundigen</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">865</td>
<td>Gumligen</td>
<td>290</td>
<td>113.95844</td>
<td>Bern Wylerfeld - Thun</td>
<td>8507003</td>
<td>Gümligen</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">270</td>
<td>Rubigen</td>
<td>290</td>
<td>119.03812</td>
<td>Bern Wylerfeld - Thun</td>
<td>8507005</td>
<td>Rubigen</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1333</td>
<td>Munsingen</td>
<td>290</td>
<td>122.13149</td>
<td>Bern Wylerfeld - Thun</td>
<td>8507006</td>
<td>Münsingen</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">695</td>
<td>Wichtrach</td>
<td>290</td>
<td>125.73250</td>
<td>Bern Wylerfeld - Thun</td>
<td>8507007</td>
<td>Wichtrach</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">892</td>
<td>Kiesen</td>
<td>290</td>
<td>128.30300</td>
<td>Bern Wylerfeld - Thun</td>
<td>8507008</td>
<td>Kiesen</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1055</td>
<td>Uttigen</td>
<td>290</td>
<td>131.09513</td>
<td>Bern Wylerfeld - Thun</td>
<td>8507009</td>
<td>Uttigen</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>We see here for one example (Line 290) that the stations are now nicely sorted in ascending order of <code>'KM'</code>.</p>
<p>Now, we can create a new column that always contains the station name of the next row using the handy <code>shift()</code> method. We then do the same with the <code>KM</code> column and compute the distance between any subsequent stations. We will use those distances later on as edge weights for this representation.</p>
<p>The last row within a group will always have a missing value for those new columns as there is no next station at the end of a line. So, we drop the last row of each line.</p>
<div id="7852203f" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a new column that for each row contains the next stop within the group.</span></span>
<span id="cb49-2">linien_sorted[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NEXT_STATION"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linien_sorted.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linie"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STATION_NAME"</span>].shift(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb49-3"></span>
<span id="cb49-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Do the same for KM.</span></span>
<span id="cb49-5">linien_sorted[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NEXT_STATION_KM"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linien_sorted.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Linie"</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KM"</span>].shift(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb49-6"></span>
<span id="cb49-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute distance.</span></span>
<span id="cb49-8">linien_sorted[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DISTANCE"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linien_sorted[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NEXT_STATION_KM"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> linien_sorted[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KM"</span>]</span>
<span id="cb49-9"></span>
<span id="cb49-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Drop all rows where 'NEXT_STATION' is missing</span></span>
<span id="cb49-11">linien_sorted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> linien_sorted.dropna(subset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NEXT_STATION"</span>])</span></code></pre></div>
</div>
<p>We now extract the values of the columns <code>STATION_NAME</code> and <code>NEXT_STATION</code> and ignore the distances for now. We will use this to validate our approach. Importantly, we sort the node pairs in each edge in the same way as before (alphabetically).</p>
<div id="eda200a9" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now let's extract the edges</span></span>
<span id="cb50-2">linien_edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(linien_sorted[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STATION_NAME'</span>], linien_sorted[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NEXT_STATION'</span>]))</span>
<span id="cb50-3"></span>
<span id="cb50-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure the tuples are arranged in the same way as above (and unique).</span></span>
<span id="cb50-5">linien_edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> e <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> linien_edges))</span></code></pre></div>
</div>
<p>As for the validation, we first want to check whether there are edges in <code>linien_edges</code> that are neither a shortcut nor in the final edgelist from above.</p>
<div id="052c2785" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check which edges are in linien_edges but neither in final_edges nor in shortcut_edges_clean.</span></span>
<span id="cb51-2">[x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> linien_edges <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> final_edges <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> shortcut_edges_clean]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>[('La Chaux-de-Fonds', 'Tavannes'),
 ('Langenthal', 'Niederbipp'),
 ('Koblenz', 'Laufenburg'),
 ('Neuhausen Rheinfall', 'Rafz'),
 ('Niederbipp', 'Solothurn'),
 ('Solothurn', 'Zollikofen'),
 ('Chambrelien', 'Corcelles-Peseux'),
 ('Büren an der Aare', 'Solothurn'),
 ('Dietfurt', 'Kaltbrunn'),
 ('Bauma', 'Hinwil'),
 ('Concise', 'Grandson')]</code></pre>
</div>
</div>
<p>There are some candidate edges but I checked all of them manually in the train schedule and none of them seem to have direct train connections. It could be that some of these are old train lines that are not active anymore.</p>
<p>Are there any edges in <code>linien_edges</code> that were classified as shortcuts?</p>
<div id="b9279721" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Are there any edges that I classified as shortcuts?</span></span>
<span id="cb53-2">[x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> linien_edges <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> shortcut_edges_clean]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="31">
<pre><code>[('Brig', 'Visp'), ('Chur', 'Landquart'), ('Niederbipp', 'Oensingen')]</code></pre>
</div>
</div>
<p>Yes, but the three connections are in fact shortcuts. Between Niederbipp and Oensingen there is a small station called Niederbipp Industrie. Between Brig and Visp there is a small station called Eyholz. Between Chur and Landquart there are several smaller stations. Note, however, that it could be that even though the train tracks between Chur and Landquart actually pass those smaller stations there is no infrastructure for trains to actually stop.</p>
<p>A manual check of the edges reveals that there are other shortcuts that our procedure was not able to identify. For example, the edge <code>(Bern, Zofingen)</code> cannot be identified because there is no other “Fahrt” that contains these two stations and stops somewhere in between. We manually remove such edges. In addition, we add some edges for which I know that there is actually infrastructure (tunnels, high-speed routes) that directly connects the two nodes involved.</p>
<div id="78cd64ed" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Manually remove edges.</span></span>
<span id="cb55-2">final_edges.remove((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bern'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Zofingen'</span>))</span>
<span id="cb55-3">final_edges.remove((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bern Wankdorf'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Zürich HB'</span>))</span>
<span id="cb55-4">final_edges.remove((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Morges'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Yverdon-les-Bains'</span>))</span>
<span id="cb55-5">final_edges.remove((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Aarau'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sissach'</span>))</span>
<span id="cb55-6">final_edges.remove((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bergün/Bravuogn'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pontresina'</span>))</span>
<span id="cb55-7">final_edges.remove((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Interlaken West'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spiez'</span>))</span>
<span id="cb55-8">final_edges.remove((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Biel/Bienne'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Grenchen Nord'</span>))</span>
<span id="cb55-9">final_edges.remove((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Chambrelien'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Neuchâtel'</span>))</span>
<span id="cb55-10">final_edges.remove((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Concise'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Yverdon-les-Bains'</span>))</span>
<span id="cb55-11">final_edges.remove((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Etoy'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rolle'</span>))</span>
<span id="cb55-12">final_edges.remove((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Klosters Platz'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Susch'</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Avoid several edges representing the Vereina tunnel</span></span>
<span id="cb55-13"></span>
<span id="cb55-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Manually add edges.</span></span>
<span id="cb55-15">final_edges.append((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Biasca'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Erstfeld'</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># New Gotthard tunnel</span></span>
<span id="cb55-16">final_edges.append((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Bern Wankdorf'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rothrist'</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bahn-2000</span></span>
<span id="cb55-17">final_edges.append((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Chambrelien'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Corcelles-Peseux'</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connector that was missing</span></span>
<span id="cb55-18">final_edges.append((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Concise'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Grandson'</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connector that was missing</span></span>
<span id="cb55-19">final_edges.append((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Immensee'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rotkreuz'</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connector that was missing</span></span>
<span id="cb55-20">final_edges.append((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Olten'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rothrist'</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Connector not going through Aarburg-Oftringen</span></span>
<span id="cb55-21">final_edges.append((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Rothrist'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Solothurn'</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bahn-2000</span></span>
<span id="cb55-22">final_edges.append((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Aarau'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Däniken SO'</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Eppenberg tunnel</span></span></code></pre></div>
</div>
<p>Funny thing is that the two edges, <code>('Chambrelien', 'Corcelles-Peseux')</code> and <code>('Concise', 'Grandson')</code>, that our validation procedure proposed as missing edges did actually need to be added upon further inspection. They were missing connectors when I visually inspected the network.</p>
<p>After these final modifications of the edgelist, the total number of edges is 1’706.</p>
</section>
<section id="edge-weights" class="level4">
<h4 class="anchored" data-anchor-id="edge-weights">Edge weights</h4>
<p>As edge weights, we will compute the distances between stations. We will have exact distances for the lines maintained by SBB (we already computed them above based on the dataset <a href="https://data.sbb.ch/explore/dataset/linie-mit-betriebspunkten/information/">Linie (Betriebspunkte)</a>). For all other edges, we will simply compute the direct distance based on the coordinates of the stations.</p>
<p>In a first step, we augment every edge in our edgelist with the <em>direct</em> distance:</p>
<div id="3f5ce36b" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb56" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb56-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># New column with coordinates in the same column.</span></span>
<span id="cb56-2">nodes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'coord'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(nodes.LATITUDE, nodes.LONGITUDE))</span>
<span id="cb56-3"></span>
<span id="cb56-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define a function to compute direct distance.</span></span>
<span id="cb56-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> compute_distance(station1, station2):</span>
<span id="cb56-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> geopy.distance.geodesic(</span>
<span id="cb56-7">        nodes.loc[nodes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STATION_NAME'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> station1, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coord"</span>].item(), </span>
<span id="cb56-8">        nodes.loc[nodes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STATION_NAME'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> station2, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coord"</span>].item()).km</span>
<span id="cb56-9"></span>
<span id="cb56-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute direct distances between node pairs.</span></span>
<span id="cb56-11">final_edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], compute_distance(e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> e <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> final_edges]</span></code></pre></div>
</div>
<p>Then, in a second step we modify every edge that appears in the validation data (based on the dataset <a href="https://data.sbb.ch/explore/dataset/linie-mit-betriebspunkten/information/">Linie (Betriebspunkte)</a>)) and fill in the <em>exact</em> distance. For this we transform the validation data into a dictionary for fast lookups. The <code>get()</code> method then allows for easy replacement of distances:</p>
<div id="4d503abe" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb57" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb57-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># List of edges including distances.</span></span>
<span id="cb57-2">linien_edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(linien_sorted[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STATION_NAME'</span>], linien_sorted[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NEXT_STATION'</span>], linien_sorted[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DISTANCE'</span>]))</span>
<span id="cb57-3"></span>
<span id="cb57-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure the tuples are arranged in the same way as above (and unique).</span></span>
<span id="cb57-5">linien_edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]), e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> e <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> linien_edges))</span>
<span id="cb57-6"></span>
<span id="cb57-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to a dict.</span></span>
<span id="cb57-8">linien_edges_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {(e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]): e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> e <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> linien_edges}</span>
<span id="cb57-9"></span>
<span id="cb57-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add exact distance for edges that exist in dict with exact distance.</span></span>
<span id="cb57-11">final_edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [(n1, n2, dist, linien_edges_dict.get((n1, n2), np.nan)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n1, n2, dist <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> final_edges]</span></code></pre></div>
</div>
</section>
<section id="export-the-edgelist" class="level4">
<h4 class="anchored" data-anchor-id="export-the-edgelist">Export the edgelist</h4>
<p>Finally, we can export the edges as before for the other representations.</p>
<div id="89c4feca" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb58" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb58-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a node dict with BPUIC as values</span></span>
<span id="cb58-2">node_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(nodes.STATION_NAME, nodes.BPUIC))</span>
<span id="cb58-3"></span>
<span id="cb58-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Transform edge dict to nested list and replace all station names with their BPUIC.</span></span>
<span id="cb58-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Also, round the distances to 4 decimal points.</span></span>
<span id="cb58-6">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[node_dict[e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]], node_dict[e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(e[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> e <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> final_edges]</span>
<span id="cb58-7"></span>
<span id="cb58-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dataframe</span></span>
<span id="cb58-9">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(edges, columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BPUIC1'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BPUIC2'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DISTANCE_GEODESIC'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DISTANCE_EXACT'</span>])</span>
<span id="cb58-10"></span>
<span id="cb58-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have a look</span></span>
<span id="cb58-12">edges.head()</span>
<span id="cb58-13"></span>
<span id="cb58-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export edge list</span></span>
<span id="cb58-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># edges.to_csv("edgelist_SoSta.csv", sep = ';', encoding = 'utf-8', index = False)</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="35">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">BPUIC1</th>
<th data-quarto-table-cell-role="th">BPUIC2</th>
<th data-quarto-table-cell-role="th">DISTANCE_GEODESIC</th>
<th data-quarto-table-cell-role="th">DISTANCE_EXACT</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>8502182</td>
<td>8502196</td>
<td>0.4745</td>
<td>NaN</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>8501120</td>
<td>8504000</td>
<td>2.2298</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>8500215</td>
<td>8500216</td>
<td>2.2300</td>
<td>2.2609</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>8502123</td>
<td>8502103</td>
<td>2.2295</td>
<td>NaN</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>8501178</td>
<td>8501175</td>
<td>2.2188</td>
<td>NaN</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://martinsterchi.ch/blog/sbb_nw2/Network_SoSta.svg" class="img-fluid figure-img" width="850"></p>
<figcaption>The Swiss railway network with a geographic layout, Space-of-Stations representation (created using Gephi).</figcaption>
</figure>
</div>
<p>You can download the result here: <a href="edgelist_SoSta.csv" download="">Edgelist space-of-stations (CSV)</a>.</p>
</section>
</section>
<section id="references" class="level3">
<h3 class="anchored" data-anchor-id="references">References</h3>
<p>Kurant, M., &amp; Thiran, P. (2006). Extraction and analysis of traffic and topologies of transportation networks. Physical Review E, 74(3), 036114. <a href="https://doi.org/10.1103/PhysRevE.74.036114" class="uri">https://doi.org/10.1103/PhysRevE.74.036114</a></p>
<p><em>The title image has been created by Wikimedia user JoachimKohler-HB and is licensed under <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.en">Creative Commons</a>.</em></p>


</section>

 ]]></description>
  <category>Networks</category>
  <guid>https://martinsterchi.ch/blog/sbb_nw2/</guid>
  <pubDate>Mon, 31 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://martinsterchi.ch/blog/sbb_nw2/sbb_hb.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>k-Means for Image Segmentation</title>
  <dc:creator>Martin Sterchi</dc:creator>
  <link>https://martinsterchi.ch/blog/kmeans_imgseg/</link>
  <description><![CDATA[ 




<p>The other day, I had a great session with my Master’s students exploring <strong>Clustering</strong>. We focused primarily on the <strong>k-Means</strong> algorithm, and I was reminded of just how cool that algorithm is.</p>
<p>One of the reasons k-Means is so interesting is that it’s easy to understand and visualize (well, at least in 2D and with numeric-only features). But beyond that, its versatility is what truly makes it stand out. k-Means isn’t just for clustering observations into similar groups, it has a wide range of applications.</p>
<p>For instance, we can use k-Means for dimensionality reduction, feature engineering, selecting which observations to label in a semi-supervised setting, and even <strong>image segmentation</strong>. If you’re interested in exploring more, I highly recommend <a href="https://www.oreilly.com/library/view/hands-on-machine-learning/9781098125967/">Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow</a> by Aurélien Géron—an excellent resource showcasing the many ways k-Means can be applied.</p>
<p>Here, I’d like to quickly demonstrate how to use k-Means for image segmentation on your own portrait picture using <code>R</code>. This is just fun, nothing too terribly useful.</p>
<section id="loading-picture" class="level3">
<h3 class="anchored" data-anchor-id="loading-picture">Loading picture</h3>
<p>We start by loading my FHNW portrait picture (FHNW is my current employer). For this we use the handy <code>jpeg</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(jpeg)</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load image</span></span>
<span id="cb1-4">X <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readJPEG</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Martin-Sterchi.jpg"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">native =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dimensions of X</span></span>
<span id="cb1-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(X)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 512 512   3</code></pre>
</div>
</div>
<p>As you can see, <code>X</code> is a three-dimensional array. You can imagine it as three stacked <img src="https://latex.codecogs.com/png.latex?512%5Ctimes%20512"> matrices, one per Red-Green-Blue (RGB) color channel.</p>
<p>Next, we store the original dimensions of <code>X</code> and then transform the array into a large matrix, in which every row represents a pixel.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Store dimensions of original image</span></span>
<span id="cb3-2">dim_original <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(X)</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Transform 3D array to matrix</span></span>
<span id="cb3-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(X) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(dim_original[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> dim_original[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># New dimensions of X</span></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(X)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 262144      3</code></pre>
</div>
</div>
<p>The picture is now basically represented as a dataset of <img src="https://latex.codecogs.com/png.latex?n=512%5Ccdot%20512=262'144"> observations (every observation is a pixel) and <img src="https://latex.codecogs.com/png.latex?p=3"> columns (the three color channels).</p>
</section>
<section id="running-k-means" class="level3">
<h3 class="anchored" data-anchor-id="running-k-means">Running k-Means</h3>
<p>The idea of this type of image segmentation is simple: we let k-Means cluster the observations (pixels) into <img src="https://latex.codecogs.com/png.latex?k"> groups of similarly colored pixels. Or in other words, pixels with similar RGB color values will be grouped into the same color cluster.</p>
<p>For now, we let k-Means create <img src="https://latex.codecogs.com/png.latex?k=2"> clusters.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set k (number of clusters)</span></span>
<span id="cb5-2">k <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run k-means</span></span>
<span id="cb5-5">km.out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kmeans</span>(X, k, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nstart =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output k-means</span></span>
<span id="cb5-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">print</span>(km.out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>centers)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>       [,1]      [,2]      [,3]
1 0.8660900 0.8047682 0.7698332
2 0.4066233 0.2899175 0.2120528</code></pre>
</div>
</div>
<p>The output above are the two cluster centers (or centroids). These two centroids are obviously also colors. Let’s visualize the colors:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Two square plots next to each other</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pty =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s"</span>)</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the two centroid colors using rgb()</span></span>
<span id="cb7-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgb</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8660900</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8047682</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7698332</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cex =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ann =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb7-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rgb</span>(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.4066233</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2899175</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2120528</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pch =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">cex =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ann =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://martinsterchi.ch/blog/kmeans_imgseg/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>The trick is now to replace the colors of all pixels belonging to a given cluster by the cluster’s centroid color. This will lead to a segmentation of the image into (in our case) two areas of different color.</p>
<p>In <code>R</code>, we can create the segmented image array as follows:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create segmented image</span></span>
<span id="cb8-2">X_segmented <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> km.out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>centers[km.out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cluster, ]</span></code></pre></div>
</div>
<p><code>km.out$cluster</code> is a vector of length 262’144 defining which pixel belongs to which cluster.</p>
<p>Finally, let’s transform the segmented image back to its orignal dimensions.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape to original dimensions</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(X_segmented) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dim_original</span></code></pre></div>
</div>
</section>
<section id="plotting-the-image" class="level3">
<h3 class="anchored" data-anchor-id="plotting-the-image">Plotting the image</h3>
<p>We can now plot the resulting image:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot should be square</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pty =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s"</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Empty plot</span></span>
<span id="cb10-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ann =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add image</span></span>
<span id="cb10-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rasterImage</span>(X_segmented, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://martinsterchi.ch/blog/kmeans_imgseg/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>If you want to export the segmented portrait picture to your working directory, you can run the following command:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export image</span></span>
<span id="cb11-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">writeJPEG</span>(X_segmented, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">target =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output.jpg"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">quality =</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)</span></code></pre></div>
</div>
</section>
<section id="shades-of-me" class="level3">
<h3 class="anchored" data-anchor-id="shades-of-me">10 Shades of me</h3>
<p>Finally, let’s plot the segmented images for values of <img src="https://latex.codecogs.com/png.latex?k=1,%5Cdots,10">, using a for loop:</p>
<div class="cell" data-layout-align="center">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Some plot options</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">par</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mfrow =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">oma =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mar =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pty =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s"</span>)</span>
<span id="cb12-3"></span>
<span id="cb12-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over k = 1, ..., 10</span></span>
<span id="cb12-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (k <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) {</span>
<span id="cb12-6">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># EMpty plot</span></span>
<span id="cb12-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">type =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"n"</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ann =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">axes =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>)</span>
<span id="cb12-8">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># k-Means</span></span>
<span id="cb12-9">  km.out <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kmeans</span>(X, k, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nstart =</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb12-10">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Segmented image</span></span>
<span id="cb12-11">  X_segmented <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> km.out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>centers[km.out<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>cluster, ]</span>
<span id="cb12-12">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reshape segmented image</span></span>
<span id="cb12-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dim</span>(X_segmented) <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> dim_original</span>
<span id="cb12-14">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Plot the image</span></span>
<span id="cb12-15">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rasterImage</span>(X_segmented, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-16">}</span></code></pre></div>
<div class="cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://martinsterchi.ch/blog/kmeans_imgseg/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid quarto-figure quarto-figure-center figure-img" width="672"></p>
</figure>
</div>
</div>
</div>
<p>For <img src="https://latex.codecogs.com/png.latex?k=1">, only one cluster is built and its centroid color is the average color in the image. In that case, the image obviously contains no contours.</p>
<p>I hope you enjoyed that brief post and maybe you can use it to create your own stylized portrait picture.</p>


</section>

 ]]></description>
  <category>Data Science</category>
  <guid>https://martinsterchi.ch/blog/kmeans_imgseg/</guid>
  <pubDate>Fri, 21 Mar 2025 00:00:00 GMT</pubDate>
  <media:content url="https://martinsterchi.ch/blog/kmeans_imgseg/me.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>SBB Network Analysis - Part 1</title>
  <dc:creator>Martin Sterchi</dc:creator>
  <link>https://martinsterchi.ch/blog/sbb_nw/</link>
  <description><![CDATA[ 




<p><em>Update 10.03.2025: I updated the analysis in this blog so that it runs on more recent data. More precisely, I use the train traffic data from March 5, 2025 to construct the network. Moreover, I now properly reference the source data and I have added a bunch of additional node attributes. The most interesting new node attributes are average passenger frequency data for all stations.</em></p>
<p>For quite some time I have been wondering if there are some interesting Swiss data that would serve as the basis for some fun network analysis. As a fan of public transportation and a long-time owner of a Swiss train pass (“GA”), the answer should have been obvious much sooner: the <strong>Swiss railway network</strong>.</p>
<p>I wanted to create a (static) network in which <em>each node corresponds to a train station</em> and <em>each directed edge between any two nodes, A and B, means there is at least one train going nonstop from A to B</em>. Ideally, the edge would also be attributed with some weight representing the importance of the edge (e.g., how many trains go nonstop from A to B on a given day).</p>
<p>The structure of this post is as follows. I will first introduce the three datasets that I used to create the network. I will then show how to load and preprocess each one of them and how to join them. Finally, I will present how to transform those data into a form that is suitable for network analysis. The following image shows a visualization of the network data resulting from this post.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://martinsterchi.ch/blog/sbb_nw/network.svg" class="img-fluid figure-img" width="850"></p>
<figcaption>The Swiss railway network with a geographic layout (created using Gephi).</figcaption>
</figure>
</div>
<p>This is the first part of a series that will cover all kinds of fun network analysis based on the Swiss railway network.</p>
<section id="data-sources" class="level3">
<h3 class="anchored" data-anchor-id="data-sources">Data sources</h3>
<p>It was not that obvious how a network with nodes and edges following the definitions given above could be constructed based on data from the Swiss Federal Railways (abbreviated by the German speakers in Switzerland as <strong>SBB</strong>). With some help from SBB Experts and the <a href="https://opentransportdata.swiss/en/">Open Data Plattform Mobility Switzerland</a>, I finally found the right data.</p>
<p>The first and most important dataset is called <a href="https://data.opentransportdata.swiss/de/dataset/istdaten">Ist-Daten</a> and, for a given day, contains all regular stops of all trains in Switzerland with their planned and effective arrival and departure times. From this data, we can infer all nonstop stretches of any train in Switzerland. A description of this dataset can be found <a href="https://opentransportdata.swiss/de/cookbook/actual-data/">here</a>.</p>
<p>Note that the “Ist-Daten” not only contain the data for trains but also for all other public transport (buses, trams, and even boats). To keep things simple we will focus on the train network.</p>
<p>The second dataset is the <a href="https://data.opentransportdata.swiss/de/dataset/service-points-actual-date">Dienststellen-Daten</a> which basically allows to add node attributes such as the geographic coordinates of a node (i.e., a train station). A description of this dataset can be found <a href="https://opentransportdata.swiss/de/cookbook/service-points/">here</a>.</p>
<p>The third dataset is a <a href="https://data.opentransportdata.swiss/en/dataset/einundaus">statistic of the average number of passengers boarding and alighting</a>. It will allow us to add further interesting node attributes.</p>
</section>
<section id="load-and-preprocess-ist-daten" class="level3">
<h3 class="anchored" data-anchor-id="load-and-preprocess-ist-daten">Load and preprocess “Ist-Daten”</h3>
<p>Here, we will load and preprocess the “Ist-Daten” from which we can derive the edges of our network. First, I import some Python libraries and print their version number for better reproducibility of this code.</p>
<div id="91f40988" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Counter</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check versions of libraries.</span></span>
<span id="cb1-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"NumPy version:"</span>, np.__version__)</span>
<span id="cb1-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pandas version:"</span>, pd.__version__)</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make sure there is no limit on the number of columns shown.</span></span>
<span id="cb1-10">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>NumPy version: 1.26.4
Pandas version: 2.1.4</code></pre>
</div>
</div>
<p>Let’s now load the data. You can see in the filename that I downloaded the “Ist-Daten” from the SBB portal for March 5, 2025. You can get the data for any day you want <a href="https://data.opentransportdata.swiss/de/dataset/istdaten">here</a>.</p>
<div id="72cbf448" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the data</span></span>
<span id="cb3-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'2025-03-05_istdaten.csv'</span>, sep<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>, low_memory<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<p>To get a feeling for the data, let’s check the number of rows and columns.</p>
<div id="2cb07ba0" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of rows and columns</span></span>
<span id="cb4-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(2510290, 21)</code></pre>
</div>
</div>
<p>Ok, it’s actually a pretty big dataset: it has over 2.5 million rows. That makes sense as this file contains every stop of every vehicle involved in public transport on a given day. Thus, every row corresponds to a stop of a train, bus, or any other vehicle of public transport.</p>
<div id="c612d916" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Missing values per column</span></span>
<span id="cb6-2">df.isna().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>BETRIEBSTAG                  0
FAHRT_BEZEICHNER             0
BETREIBER_ID                 0
BETREIBER_ABK                0
BETREIBER_NAME               0
PRODUKT_ID                  31
LINIEN_ID                    0
LINIEN_TEXT                  0
UMLAUF_ID              1362009
VERKEHRSMITTEL_TEXT          0
ZUSATZFAHRT_TF               0
FAELLT_AUS_TF                0
BPUIC                        0
HALTESTELLEN_NAME       169114
ANKUNFTSZEIT            149415
AN_PROGNOSE             156828
AN_PROGNOSE_STATUS      149200
ABFAHRTSZEIT            149426
AB_PROGNOSE             157273
AB_PROGNOSE_STATUS      149115
DURCHFAHRT_TF                0
dtype: int64</code></pre>
</div>
</div>
<p>We can see that some columns contain many missing values. The only one I worry about for now is the column <code>PRODUKT_ID</code>. If you look through these rows (I don’t show that here), you can see that they should all be of type “Zug” (train). Thus, we impute accordingly:</p>
<div id="0f64c84d" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Impute 'Zug'</span></span>
<span id="cb8-2">df.loc[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PRODUKT_ID"</span>].isna(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PRODUKT_ID"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Zug'</span></span></code></pre></div>
</div>
<p>There are quite a few date-timestamp columns that are not yet in the proper format. Thus, we now convert them to datetime formats:</p>
<div id="4d7e3d44" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert BETRIEBSTAG to date format</span></span>
<span id="cb9-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BETRIEBSTAG'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BETRIEBSTAG'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.%m.%Y"</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert ANKUNFTSZEIT, AN_PROGNOSE, ABFAHRTSZEIT, AB_PROGNOSE to datetime format</span></span>
<span id="cb9-5">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ANKUNFTSZEIT'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ANKUNFTSZEIT'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.%m.%Y %H:%M"</span>)</span>
<span id="cb9-6">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AN_PROGNOSE'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AN_PROGNOSE'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.%m.%Y %H:%M:%S"</span>)</span>
<span id="cb9-7">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ABFAHRTSZEIT'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ABFAHRTSZEIT'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.%m.%Y %H:%M"</span>)</span>
<span id="cb9-8">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AB_PROGNOSE'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.to_datetime(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AB_PROGNOSE'</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.%m.%Y %H:%M:%S"</span>)</span></code></pre></div>
</div>
<p>Now is a good time to finally have a look at the dataframe:</p>
<div id="b48354f7" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's look at first few rows</span></span>
<span id="cb10-2">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">BETRIEBSTAG</th>
<th data-quarto-table-cell-role="th">FAHRT_BEZEICHNER</th>
<th data-quarto-table-cell-role="th">BETREIBER_ID</th>
<th data-quarto-table-cell-role="th">BETREIBER_ABK</th>
<th data-quarto-table-cell-role="th">BETREIBER_NAME</th>
<th data-quarto-table-cell-role="th">PRODUKT_ID</th>
<th data-quarto-table-cell-role="th">LINIEN_ID</th>
<th data-quarto-table-cell-role="th">LINIEN_TEXT</th>
<th data-quarto-table-cell-role="th">UMLAUF_ID</th>
<th data-quarto-table-cell-role="th">VERKEHRSMITTEL_TEXT</th>
<th data-quarto-table-cell-role="th">ZUSATZFAHRT_TF</th>
<th data-quarto-table-cell-role="th">FAELLT_AUS_TF</th>
<th data-quarto-table-cell-role="th">BPUIC</th>
<th data-quarto-table-cell-role="th">HALTESTELLEN_NAME</th>
<th data-quarto-table-cell-role="th">ANKUNFTSZEIT</th>
<th data-quarto-table-cell-role="th">AN_PROGNOSE</th>
<th data-quarto-table-cell-role="th">AN_PROGNOSE_STATUS</th>
<th data-quarto-table-cell-role="th">ABFAHRTSZEIT</th>
<th data-quarto-table-cell-role="th">AB_PROGNOSE</th>
<th data-quarto-table-cell-role="th">AB_PROGNOSE_STATUS</th>
<th data-quarto-table-cell-role="th">DURCHFAHRT_TF</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2025-03-05</td>
<td>80:800631:17230:000</td>
<td>80:800631</td>
<td>DB</td>
<td>DB Regio AG Baden-Württemberg</td>
<td>Zug</td>
<td>17230</td>
<td>RB</td>
<td>NaN</td>
<td>RB</td>
<td>False</td>
<td>False</td>
<td>8500090</td>
<td>Basel Bad Bf</td>
<td>2025-03-05 04:59:00</td>
<td>2025-03-05 04:59:00</td>
<td>PROGNOSE</td>
<td>NaT</td>
<td>NaT</td>
<td>NaN</td>
<td>False</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2025-03-05</td>
<td>80:800631:17233:000</td>
<td>80:800631</td>
<td>DB</td>
<td>DB Regio AG Baden-Württemberg</td>
<td>Zug</td>
<td>17233</td>
<td>RB</td>
<td>NaN</td>
<td>RB</td>
<td>False</td>
<td>False</td>
<td>8500090</td>
<td>Basel Bad Bf</td>
<td>NaT</td>
<td>NaT</td>
<td>NaN</td>
<td>2025-03-05 06:07:00</td>
<td>2025-03-05 06:08:00</td>
<td>PROGNOSE</td>
<td>False</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2025-03-05</td>
<td>80:800631:17234:000</td>
<td>80:800631</td>
<td>DB</td>
<td>DB Regio AG Baden-Württemberg</td>
<td>Zug</td>
<td>17234</td>
<td>RB</td>
<td>NaN</td>
<td>RB</td>
<td>False</td>
<td>False</td>
<td>8500090</td>
<td>Basel Bad Bf</td>
<td>2025-03-05 05:56:00</td>
<td>2025-03-05 06:02:00</td>
<td>PROGNOSE</td>
<td>NaT</td>
<td>NaT</td>
<td>NaN</td>
<td>False</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>2025-03-05</td>
<td>80:800631:17235:000</td>
<td>80:800631</td>
<td>DB</td>
<td>DB Regio AG Baden-Württemberg</td>
<td>Zug</td>
<td>17235</td>
<td>RB</td>
<td>NaN</td>
<td>RB</td>
<td>False</td>
<td>False</td>
<td>8500090</td>
<td>Basel Bad Bf</td>
<td>NaT</td>
<td>NaT</td>
<td>NaN</td>
<td>2025-03-05 06:43:00</td>
<td>2025-03-05 06:53:00</td>
<td>PROGNOSE</td>
<td>False</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2025-03-05</td>
<td>80:800631:17236:000</td>
<td>80:800631</td>
<td>DB</td>
<td>DB Regio AG Baden-Württemberg</td>
<td>Zug</td>
<td>17236</td>
<td>RB</td>
<td>NaN</td>
<td>RB</td>
<td>False</td>
<td>False</td>
<td>8500090</td>
<td>Basel Bad Bf</td>
<td>2025-03-05 06:31:00</td>
<td>2025-03-05 06:34:00</td>
<td>PROGNOSE</td>
<td>NaT</td>
<td>NaT</td>
<td>NaN</td>
<td>False</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>But what do all these columns mean? I have browsed the metadata a bit and found the following explanations (that I hopefully accurately reproduce in English):</p>
<ul>
<li><code>BETRIEBSTAG</code>: Simply the day on which the data were recorded.</li>
<li><code>FAHRT_BEZEICHNER</code>: This is some elaborate identifier in the format [UIC-Countrycode]:[GO-Number]:[VM-Number]:[Extended Reference].</li>
<li><code>BETREIBER_ID</code>: [UIC-Countrycode]:[GO-Number]. GO is short for “Geschäftsorganisation”. For foreign organizations it is not a GO-Number but a TU-Number with TU meaning “Transportunternehmen”. It is basically an ID for the company running that particular train.</li>
<li><code>BETREIBER_ABK</code>: The abbreviation for the company running the train.</li>
<li><code>BETREIBER_NAME</code>: The full name of the company running the train.</li>
<li><code>PRODUKT_ID</code>: Type of public transport.</li>
<li><code>LINIEN_ID</code>: The ID for the route of that train.</li>
<li><code>LINIEN_TEXT</code>: The public ID for the route of that train.</li>
<li><code>UMLAUF_ID</code>: An ID for a “Umlauf” which describes the period starting with the vehicle leaving the garage and ending with the vehicle being deposited back in the garage.</li>
<li><code>ZUSATZFAHRT_TF</code>: Is true if it is an extraordinary (not usually scheduled) trip.</li>
<li><code>FAELLT_AUS_TF</code>: Is true if the trip is cancelled.</li>
<li><code>BPUIC</code>: The ID of the station.</li>
<li><code>HALTESTELLEN_NAME</code>: The name of the station.</li>
<li><code>ANKUNFTSZEIT</code>: Planned time of arrival at the station.</li>
<li><code>AN_PROGNOSE</code>: Prediction of time of arrival at the station.</li>
<li><code>AN_PROGNOSE_STATUS</code>: Status of that prediction. Possible values are: “UNBEKANNT”, “leer”, “PROGNOSE”, “GESCHAETZT”, “REAL”. If the value of that column is “REAL”, it means that the predicted time of arrival is the time the train actually arrived at the station.</li>
<li><code>ABFAHRTSZEIT</code>, <code>AB_PROGNOSE</code>, <code>AB_PROGNOSE_STATUS</code>: Same definitions as for arrival but here for departure from the station.</li>
<li><code>DURCHFAHRT_TF</code>: Is true if the vehicle does not stop even if a stop was scheduled.</li>
</ul>
<p>Let’s now have a look at the values in the column <code>PRODUKT_ID</code>:</p>
<div id="cc8c3ec4" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Look at PRODUKT_ID</span></span>
<span id="cb11-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"PRODUKT_ID"</span>].value_counts()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>PRODUKT_ID
Bus            1965207
Tram            249408
Zug             163649
BUS             124171
Metro             4936
Zahnradbahn       1944
Schiff             975
Name: count, dtype: int64</code></pre>
</div>
</div>
<p>We can see that trains are only the third most frequent category in this data. However, as mentioned before, we want to keep it simple and now reduce the dataset to only trains.</p>
<div id="1510c29c" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First we reduce to only trains</span></span>
<span id="cb13-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PRODUKT_ID'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Zug"</span>]</span></code></pre></div>
</div>
<p>In a next step, we remove all rows where the corresponding train has been cancelled.</p>
<div id="de258dbc" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter out all entries with FAELLT_AUS_TF == True</span></span>
<span id="cb14-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FAELLT_AUS_TF'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>]</span></code></pre></div>
</div>
<p>When I was doing some analysis with a first version of that network, I noticed that it contains edges in both directions between Klosters Selfranga and Sagliains. Upon further inspection I found out that this corresponds to a car shuttle train. All such connections are marked with “ATZ” in the variable <code>LINIEN_TEXT</code> which probably stands for “Autozug”. We remove these connections:</p>
<div id="00aeb158" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Filter out all entries with LINIEN_TEXT == "ATZ"</span></span>
<span id="cb15-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LINIEN_TEXT'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ATZ"</span>]</span></code></pre></div>
</div>
<p>Another problem I spotted was that certain stations are split up into two based on which company is running what part of the station. I actually computed geodesic distances between any pair of stations to identify the problematic ones. I decided to manually change three cases. In the following code chunk you can see that I merge Brig and Brig Bahnhofplatz, Lugano and Lugano FLP, as well as Locarno and Locarno FART.</p>
<div id="e2c2e673" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merge stations in Brig, Lugano, Locarno</span></span>
<span id="cb16-2">df.loc[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HALTESTELLEN_NAME'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Brig Bahnhofplatz"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BPUIC"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8501609</span></span>
<span id="cb16-3">df.loc[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HALTESTELLEN_NAME'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lugano FLP"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BPUIC"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8505300</span></span>
<span id="cb16-4">df.loc[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HALTESTELLEN_NAME'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Locarno FART"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BPUIC"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8505400</span></span>
<span id="cb16-5"></span>
<span id="cb16-6">df.loc[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HALTESTELLEN_NAME'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Brig Bahnhofplatz"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HALTESTELLEN_NAME"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Brig"</span></span>
<span id="cb16-7">df.loc[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HALTESTELLEN_NAME'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lugano FLP"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HALTESTELLEN_NAME"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Lugano"</span></span>
<span id="cb16-8">df.loc[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HALTESTELLEN_NAME'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Locarno FART"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HALTESTELLEN_NAME"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Locarno"</span></span></code></pre></div>
</div>
<p>Let’s explore the data a bit more before we move to the second dataset. Let’s check out the most frequent values that occur in the column <code>BETREIBER_NAME</code>:</p>
<div id="c6337b86" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Look at BETREIBER_NAME</span></span>
<span id="cb17-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"BETREIBER_NAME"</span>].value_counts().head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>BETREIBER_NAME
Schweizerische Bundesbahnen SBB    63850
BLS AG (bls)                       16256
THURBO                             13017
Aargau Verkehr AG                   7131
Schweizerische Südostbahn (sob)     6083
Name: count, dtype: int64</code></pre>
</div>
</div>
<p>As expected, SBB is the company serving the largest number of stations. What about the column <code>VERKEHRSMITTEL_TEXT</code>?</p>
<div id="8c13e97b" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Look at VERKEHRSMITTEL_TEXT</span></span>
<span id="cb19-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VERKEHRSMITTEL_TEXT"</span>].value_counts().head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>VERKEHRSMITTEL_TEXT
S     103331
R      34435
RE      9730
IR      7532
IC      3059
Name: count, dtype: int64</code></pre>
</div>
</div>
<p>We can see that the most frequent type of trains are S-Bahns (<code>S</code>). Finally, let’s check the most frequent train stations that occur in the data:</p>
<div id="470ca6d7" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Look at HALTESTELLEN_NAME</span></span>
<span id="cb21-2">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HALTESTELLEN_NAME"</span>].value_counts().head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>HALTESTELLEN_NAME
Zürich HB          2239
Bern               1709
Winterthur          955
Zürich Oerlikon     919
Luzern              843
Name: count, dtype: int64</code></pre>
</div>
</div>
<p>Unsurprisingly, Zürich and Bern are the most frequent values occuring in the data.</p>
</section>
<section id="load-and-preprocess-dienststellen-daten" class="level3">
<h3 class="anchored" data-anchor-id="load-and-preprocess-dienststellen-daten">Load and preprocess “Dienststellen-Daten”</h3>
<p>Fortunately, we can go through the second dataset a bit more quickly. We again start by loading it and checking the dimensions of the dataframe.</p>
<div id="e74e361a" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the data</span></span>
<span id="cb23-2">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'actual_date-swiss-only-service_point-2025-03-06.csv'</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>, low_memory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb23-3"></span>
<span id="cb23-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of rows and columns</span></span>
<span id="cb23-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ds.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(55308, 55)</code></pre>
</div>
</div>
<p>The data contains a column <code>validTo</code> that allows us to filter out all stations that are not valid anymore (closed down?). We check the values that appear in this column and see that all stations should be valid as of March 6, 2025. This is no surprise as we use the dataset of currently valid stations.</p>
<div id="c7b4a774" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check 'validTo' values.</span></span>
<span id="cb25-2">ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'validTo'</span>].unique()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>array(['9999-12-31', '2025-12-13', '2025-04-06', '2026-12-12',
       '2025-08-29', '2027-12-11', '2025-03-16', '2025-05-30',
       '2099-12-31', '2028-12-09', '2025-09-30', '2030-12-14',
       '2025-06-30', '2050-12-31', '2029-12-09', '2025-08-31',
       '2025-03-31', '2025-04-12', '2025-05-16', '2025-03-06'],
      dtype=object)</code></pre>
</div>
</div>
<p>Let’s also quickly make sure that we have unique rows (based on ‘number’).</p>
<div id="821ec43b" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Is the number of unique 'number' (= BPUIC) values equal to the number of rows?</span></span>
<span id="cb27-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(pd.unique(ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'number'</span>])) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> ds.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="18">
<pre><code>True</code></pre>
</div>
</div>
<p>Finally, we keep only the columns we need (identifier, official name, and geo coordinates).</p>
<div id="8dc66c9c" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep only the relevant columns</span></span>
<span id="cb29-2">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"designationOfficial"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cantonName"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"municipalityName"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"businessOrganisationDescriptionEn"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wgs84East"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wgs84North"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"height"</span>]]</span>
<span id="cb29-3"></span>
<span id="cb29-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show first few rows</span></span>
<span id="cb29-5">ds.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">number</th>
<th data-quarto-table-cell-role="th">designationOfficial</th>
<th data-quarto-table-cell-role="th">cantonName</th>
<th data-quarto-table-cell-role="th">municipalityName</th>
<th data-quarto-table-cell-role="th">businessOrganisationDescriptionEn</th>
<th data-quarto-table-cell-role="th">wgs84East</th>
<th data-quarto-table-cell-role="th">wgs84North</th>
<th data-quarto-table-cell-role="th">height</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>1322001</td>
<td>Antronapiana</td>
<td>NaN</td>
<td>NaN</td>
<td>Autoservizi Comazzi S.R.L.</td>
<td>8.113620</td>
<td>46.060120</td>
<td>0.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>1322002</td>
<td>Anzola d'Ossola</td>
<td>NaN</td>
<td>NaN</td>
<td>Autoservizi Comazzi S.R.L.</td>
<td>8.345715</td>
<td>45.989869</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>1322003</td>
<td>Baceno</td>
<td>NaN</td>
<td>NaN</td>
<td>Autoservizi Comazzi S.R.L.</td>
<td>8.319256</td>
<td>46.261501</td>
<td>0.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>1322012</td>
<td>Castiglione</td>
<td>NaN</td>
<td>NaN</td>
<td>Autoservizi Comazzi S.R.L.</td>
<td>8.214886</td>
<td>46.020588</td>
<td>0.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>1322013</td>
<td>Ceppo Morelli</td>
<td>NaN</td>
<td>NaN</td>
<td>Autoservizi Comazzi S.R.L.</td>
<td>8.069922</td>
<td>45.971036</td>
<td>0.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="load-and-preprocess-average-traffic-data" class="level3">
<h3 class="anchored" data-anchor-id="load-and-preprocess-average-traffic-data">Load and preprocess average traffic data</h3>
<p>This part is also fairly easy. We load the data and check the dimensions, as always.</p>
<div id="b6b3cf0f" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the data</span></span>
<span id="cb30-2">ds_freq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'t01x-sbb-cff-ffs-frequentia-2023.csv'</span>, sep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">";"</span>, low_memory <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb30-3"></span>
<span id="cb30-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of rows and columns</span></span>
<span id="cb30-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ds_freq.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(3479, 14)</code></pre>
</div>
</div>
<p>If you actually have a look at the data, you see that many stations have several measurements made at different times (and the times of measurements are identified by <code>Jahr_Annee_Anno</code>). We only want to keep the most recent measurements for every station:</p>
<div id="80b746ba" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For every station, we only keep the most recent measurements.</span></span>
<span id="cb32-2">ds_freq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_freq.loc[ds_freq.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'UIC'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Jahr_Annee_Anno'</span>].idxmax()]</span></code></pre></div>
</div>
<p>Checking the data types of all columns reveals that there is still a problem with the measurement columns <code>DTV_TJM_TGM</code>, <code>DWV_TMJO_TFM</code>, and <code>DNWV_TMJNO_TMGNL</code>. They are currently of type <code>object</code> because they contain the thousand separator <code>’</code>. We thus remove all instances of this characters and transform these columns to integers.</p>
<div id="55b1732f" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data types of columns</span></span>
<span id="cb33-2">ds_freq.dtypes</span>
<span id="cb33-3"></span>
<span id="cb33-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove thousand separator and make integers out of it.</span></span>
<span id="cb33-5">ds_freq[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DTV_TJM_TGM'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_freq[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DTV_TJM_TGM'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'’'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb33-6">ds_freq[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DWV_TMJO_TFM'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_freq[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DWV_TMJO_TFM'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'’'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span>
<span id="cb33-7">ds_freq[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DNWV_TMJNO_TMGNL'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_freq[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DNWV_TMJNO_TMGNL'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'’'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>)</span></code></pre></div>
</div>
<p>Finally, we keep only the relevant columns.</p>
<div id="0aced18e" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep only the relevant columns</span></span>
<span id="cb34-2">ds_freq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds_freq[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"UIC"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DTV_TJM_TGM"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DWV_TMJO_TFM"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"DNWV_TMJNO_TMGNL"</span>]]</span></code></pre></div>
</div>
<div id="9523a8ec" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Show first few rows</span></span>
<span id="cb35-2">ds_freq.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="24">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">UIC</th>
<th data-quarto-table-cell-role="th">DTV_TJM_TGM</th>
<th data-quarto-table-cell-role="th">DWV_TMJO_TFM</th>
<th data-quarto-table-cell-role="th">DNWV_TMJNO_TMGNL</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">411</td>
<td>8500010</td>
<td>98600</td>
<td>105900</td>
<td>81900</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">423</td>
<td>8500016</td>
<td>90</td>
<td>100</td>
<td>60</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2024</td>
<td>8500020</td>
<td>5700</td>
<td>7000</td>
<td>2800</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">2294</td>
<td>8500021</td>
<td>8500</td>
<td>9900</td>
<td>5200</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1072</td>
<td>8500022</td>
<td>3600</td>
<td>4100</td>
<td>2300</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>But what exactly are these three measurement variables? The source dataset provides the following definitions:</p>
<ul>
<li><code>DTV_TJM_TGM</code>: “Average daily traffic (Monday to Sunday).”</li>
<li><code>DWV_TMJO_TFM</code>: “Average traffic on weekdays (Monday to Friday).”</li>
<li><code>DNWV_TMJNO_TMGNL</code>: “Average non-work day traffic (Saturdays, Sundays and public holidays).”</li>
</ul>
<p>It is further mentioned that all passengers boarding and exiting the trains are counted. That also means that passengers who switch trains are counted twice. For larger stations, the data may not cover all trains arriving and departing at the corresponding station. For example, the numbers for Bern do not include the traffic generated by the regional train company RBS.</p>
</section>
<section id="combine-the-three-datasets" class="level3">
<h3 class="anchored" data-anchor-id="combine-the-three-datasets">Combine the three datasets</h3>
<p>We first merge the traffic data to the “Dienststellen-Daten”:</p>
<div id="d47c3449" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Join to 'ds'</span></span>
<span id="cb36-2">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge(ds, ds_freq, left_on <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'number'</span>, right_on <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'UIC'</span>, how <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span>
<span id="cb36-3"></span>
<span id="cb36-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Drop 'UIC'</span></span>
<span id="cb36-5">ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds.drop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'UIC'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb36-6"></span>
<span id="cb36-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Better column names</span></span>
<span id="cb36-8">ds.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BPUIC'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STATION_NAME'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'CANTON'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'MUNICIPALITY'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'COMPANY'</span>,</span>
<span id="cb36-9">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LONGITUDE'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LATITUDE'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ELEVATION'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AVG_DAILY_TRAFFIC'</span>,</span>
<span id="cb36-10">              <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AVG_DAILY_TRAFFIC_WEEKDAYS'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AVG_DAILY_TRAFFIC_WEEKENDS'</span>]</span></code></pre></div>
</div>
<p>Then we merge the “Dienststellen-Daten” to the “Ist-Daten” via the <code>BPUIC</code> variable:</p>
<div id="381bf8aa" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Left-join with station names and coordinates</span></span>
<span id="cb37-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge(df, ds, on <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BPUIC'</span>, how <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span>)</span></code></pre></div>
</div>
<p>Unfortunately, there are some rows (18) for which <code>HALTESTELLEN_NAME</code> is missing. But fortunately, we know which stations are affected based on the <code>STATION_NAME</code> column that we have just merged from <code>ds</code>.</p>
<div id="56f99744" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># There are 18 missing values for 'HALTESTELLEN_NAME' which we impute from 'STATION_NAME'.</span></span>
<span id="cb38-2">df.loc[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HALTESTELLEN_NAME'</span>].isna(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"HALTESTELLEN_NAME"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.loc[df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HALTESTELLEN_NAME'</span>].isna(), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"STATION_NAME"</span>]</span></code></pre></div>
</div>
<p>Now, we are finally ready to start extracting the network from this data!</p>
</section>
<section id="convert-it-to-a-network" class="level3">
<h3 class="anchored" data-anchor-id="convert-it-to-a-network">Convert it to a network</h3>
<p>As I mentioned several times, every row corresponds to a stop of a train at a train station. One train ride from some initial station to some end station (called “Fahrt” in German) then typically consists of several stops along the way. However, there are some “Fahrten” with only one entry. Presumably these are mostly foreign trains that have their final destination at some border station. I decided to remove those entries:</p>
<div id="7f934160" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First group by FAHRT_BEZEICHNER and then filter out all groups with only one entry</span></span>
<span id="cb39-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># It's mostly trains that stop at a place at the border (I think)</span></span>
<span id="cb39-3">df_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FAHRT_BEZEICHNER'</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> g: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(g) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb39-4"></span>
<span id="cb39-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># How many rows do we loose with that?</span></span>
<span id="cb39-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> df_filtered.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>420</code></pre>
</div>
</div>
<p>This preprocessing step removes 420 rows.</p>
<p>Now we group the rows by <code>FAHRT_BEZEICHNER</code> so that each group is one “Fahrt”. In every group we sort the stops along the way in an ascending order of the departure time.</p>
<div id="8836202b" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Function to sort entries within a group in ascending order of ABFAHRTSZEIT</span></span>
<span id="cb41-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> sort_data(group):</span>
<span id="cb41-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> group.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ABFAHRTSZEIT'</span>, ascending <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb41-4"></span>
<span id="cb41-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort for each group</span></span>
<span id="cb41-6">df_sorted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_filtered.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FAHRT_BEZEICHNER'</span>, group_keys<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(sort_data)</span></code></pre></div>
</div>
<p>Let’s have a look at one “Fahrt” to get a better idea:</p>
<div id="a02d3997" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Look at one example Fahrt</span></span>
<span id="cb42-2">df_sorted.loc[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'85:22:1083:000'</span>],[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BETREIBER_NAME'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'LINIEN_TEXT'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HALTESTELLEN_NAME'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ABFAHRTSZEIT'</span>]]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">BETREIBER_NAME</th>
<th data-quarto-table-cell-role="th">LINIEN_TEXT</th>
<th data-quarto-table-cell-role="th">HALTESTELLEN_NAME</th>
<th data-quarto-table-cell-role="th">ABFAHRTSZEIT</th>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">FAHRT_BEZEICHNER</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td rowspan="10" data-quarto-table-cell-role="th" data-valign="top">85:22:1083:000</td>
<td data-quarto-table-cell-role="th">64346</td>
<td>Appenzeller Bahnen (ab)</td>
<td>S23</td>
<td>Gossau SG</td>
<td>2025-03-05 08:21:00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">64347</td>
<td>Appenzeller Bahnen (ab)</td>
<td>S23</td>
<td>Herisau</td>
<td>2025-03-05 08:28:00</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">64348</td>
<td>Appenzeller Bahnen (ab)</td>
<td>S23</td>
<td>Herisau Wilen</td>
<td>2025-03-05 08:30:00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">64349</td>
<td>Appenzeller Bahnen (ab)</td>
<td>S23</td>
<td>Waldstatt</td>
<td>2025-03-05 08:34:00</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">64350</td>
<td>Appenzeller Bahnen (ab)</td>
<td>S23</td>
<td>Zürchersmühle</td>
<td>2025-03-05 08:39:00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">64351</td>
<td>Appenzeller Bahnen (ab)</td>
<td>S23</td>
<td>Urnäsch</td>
<td>2025-03-05 08:43:00</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">64352</td>
<td>Appenzeller Bahnen (ab)</td>
<td>S23</td>
<td>Jakobsbad</td>
<td>2025-03-05 08:48:00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">64353</td>
<td>Appenzeller Bahnen (ab)</td>
<td>S23</td>
<td>Gonten</td>
<td>2025-03-05 08:50:00</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">64354</td>
<td>Appenzeller Bahnen (ab)</td>
<td>S23</td>
<td>Gontenbad</td>
<td>2025-03-05 08:52:00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">64355</td>
<td>Appenzeller Bahnen (ab)</td>
<td>S23</td>
<td>Appenzell</td>
<td>NaT</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>This is a train that goes from Gossau to Appenzell with many stops in-between. In Appenzell the <code>ABFAHRTSZEIT</code> is missing as that “Fahrt” ends there (the train will most likely go back in the other direction, but that will be a new “Fahrt”).</p>
<p>We now have enough knowledge about the data that we can extract the edges in a for loop. Basically, what we do is to loop over the rows of a given “Fahrt”, starting with the second row and extracting the edges as</p>
<p><code>(previous station, current station, travel time between stations)</code>.</p>
<p>The Python code for this looks as follows:</p>
<div id="ed00516d" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Empty list</span></span>
<span id="cb43-2">edgelist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb43-3"></span>
<span id="cb43-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Variables to store previous row and its index</span></span>
<span id="cb43-5">prev_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb43-6">prev_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb43-7"></span>
<span id="cb43-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over rows of dataframe</span></span>
<span id="cb43-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df_sorted.iterrows():</span>
<span id="cb43-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only start with second row</span></span>
<span id="cb43-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only if the two rows belong to the same Fahrt</span></span>
<span id="cb43-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> prev_idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> prev_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]:</span>
<span id="cb43-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add edge to edgelist assuming it's a directed edge</span></span>
<span id="cb43-14">        edgelist.append((prev_row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STATION_NAME'</span>], </span>
<span id="cb43-15">                         row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STATION_NAME'</span>], </span>
<span id="cb43-16">                         (row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ANKUNFTSZEIT'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> prev_row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ABFAHRTSZEIT'</span>]).total_seconds() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span>))</span>
<span id="cb43-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set current row and row index to previous ones</span></span>
<span id="cb43-18">    prev_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb43-19">    prev_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row</span></code></pre></div>
</div>
<p>To get a better idea, let’s have a look at the first list element:</p>
<div id="e3cf0985" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First list element</span></span>
<span id="cb44-2">edgelist[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>('Zürich HB', 'Basel SBB', 54.0)</code></pre>
</div>
</div>
<p>We are still not quite done yet. The problem is that the <code>edgelist</code> contains many duplicated entries as, for example, the stretch Zürich HB - Basel SBB is served by many different trains on a given day.</p>
<p>What we want to do is to go through all possible edges and sum up the number of times they occur. In addition, we would like to average the travel time between a given pair of stations over all trips between the two stations. The following code does exactly that and saves the result in the form of a dictionary.</p>
<div id="2103a484" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb46" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb46-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Empty dict</span></span>
<span id="cb46-2">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb46-3"></span>
<span id="cb46-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop over elements in edgelist</span></span>
<span id="cb46-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> edgelist:</span>
<span id="cb46-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create key</span></span>
<span id="cb46-7">    key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb46-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get previous entries in dict (if there are any)</span></span>
<span id="cb46-9">    prev <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> edges.get(key, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>))</span>
<span id="cb46-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update values in dict</span></span>
<span id="cb46-11">    edges[key] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (prev[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, prev[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> i[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>])</span>
<span id="cb46-12"></span>
<span id="cb46-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Divide summed up travel times by number of trips</span></span>
<span id="cb46-14">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k: (v[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(v[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>v[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> edges.items()}</span></code></pre></div>
</div>
<p>Let’s look at the entry for the stretch between Zürich and Basel again:</p>
<div id="f958fc0b" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Look at some element in dict</span></span>
<span id="cb47-2">edges[(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Zürich HB'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Basel SBB'</span>)]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>(36, 54.0)</code></pre>
</div>
</div>
<p>There are 36 trips between these two stations (in this direction) and they take 54 minutes on average.</p>
<p>Another issue that I spotted when I was trying to visualize this network was two edges between Basel Bad Bf and Schaffhausen. When I consulted the SBB timetable I saw that these supposedly nonstop connections actually stop at quite a few stations in Germany. But because these stops are in Germany they do not appear in the data. As a conclusion of all this, I decided to remove these two edges:</p>
<div id="f416a057" class="cell" data-execution_count="35">
<div class="sourceCode cell-code" id="cb49" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb49-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Remove the two edges between Basel Bad Bf and Schaffhausen</span></span>
<span id="cb49-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> edges[(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Basel Bad Bf'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Schaffhausen'</span>)]</span>
<span id="cb49-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> edges[(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Schaffhausen'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Basel Bad Bf'</span>)]</span></code></pre></div>
</div>
<p>We are now ready to create the final node list (and export it). First, we reduce <code>ds</code> to the train stations that actually appear in the edges (it still contains many bus and tram stops and other things).</p>
<div id="26f506ca" class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb50" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb50-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set of stations that appear in edgelist</span></span>
<span id="cb50-2">stations_in_edgelist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(edges.keys()), ()))</span>
<span id="cb50-3"></span>
<span id="cb50-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Reduces nodes dataframe to only places in edgelist</span></span>
<span id="cb50-5">nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ds[ds[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STATION_NAME'</span>].isin(stations_in_edgelist)]</span></code></pre></div>
</div>
<p>Second, we quickly check the number of missing values again.</p>
<div id="3c115ed6" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb51" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb51-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Missing values per column</span></span>
<span id="cb51-2">nodes.isna().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="37">
<pre><code>BPUIC                           0
STATION_NAME                    0
CANTON                         21
MUNICIPALITY                   21
COMPANY                         0
LONGITUDE                       0
LATITUDE                        0
ELEVATION                       1
AVG_DAILY_TRAFFIC             496
AVG_DAILY_TRAFFIC_WEEKDAYS    496
AVG_DAILY_TRAFFIC_WEEKENDS    496
dtype: int64</code></pre>
</div>
</div>
<p>There are still some issues here. The one we can solve is the missing elevation. The station Tirano (in Italy) has no value for this column. We simply impute manually (Tirano’s elevation is approximately 441m).</p>
<div id="e14dba50" class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb53" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb53-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Impute missing elevation for Tirano</span></span>
<span id="cb53-2">nodes.loc[nodes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'STATION_NAME'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Tirano"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ELEVATION"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">441</span></span></code></pre></div>
</div>
<p>The missing values for <code>CANTON</code> and <code>MUNICIPALITY</code> concern municipalities abroad (in Germany and Italy mostly). The 500 missing values in the traffic columns are stations are run by smaller companies or stations abroad. There is nothing we can do about all these missing values.</p>
<div id="7e0a9eaf" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb54" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb54-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have a look</span></span>
<span id="cb54-2">nodes.head()</span>
<span id="cb54-3"></span>
<span id="cb54-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export node list</span></span>
<span id="cb54-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nodes.sort_values("BPUIC").to_csv("nodelist.csv", sep = ';', encoding = 'utf-8', index = False)</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="39">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">BPUIC</th>
<th data-quarto-table-cell-role="th">STATION_NAME</th>
<th data-quarto-table-cell-role="th">CANTON</th>
<th data-quarto-table-cell-role="th">MUNICIPALITY</th>
<th data-quarto-table-cell-role="th">COMPANY</th>
<th data-quarto-table-cell-role="th">LONGITUDE</th>
<th data-quarto-table-cell-role="th">LATITUDE</th>
<th data-quarto-table-cell-role="th">ELEVATION</th>
<th data-quarto-table-cell-role="th">AVG_DAILY_TRAFFIC</th>
<th data-quarto-table-cell-role="th">AVG_DAILY_TRAFFIC_WEEKDAYS</th>
<th data-quarto-table-cell-role="th">AVG_DAILY_TRAFFIC_WEEKENDS</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">12683</td>
<td>8500100</td>
<td>Tavannes</td>
<td>Bern</td>
<td>Tavannes</td>
<td>Swiss Federal Railways SBB</td>
<td>7.201645</td>
<td>47.219845</td>
<td>754.17</td>
<td>1400.0</td>
<td>1600.0</td>
<td>810.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">12684</td>
<td>8500121</td>
<td>Courfaivre</td>
<td>Jura</td>
<td>Haute-Sorne</td>
<td>Swiss Federal Railways SBB</td>
<td>7.291166</td>
<td>47.335083</td>
<td>450.99</td>
<td>420.0</td>
<td>480.0</td>
<td>280.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12685</td>
<td>8500103</td>
<td>Sorvilier</td>
<td>Bern</td>
<td>Sorvilier</td>
<td>Swiss Federal Railways SBB</td>
<td>7.305794</td>
<td>47.239354</td>
<td>681.07</td>
<td>60.0</td>
<td>70.0</td>
<td>49.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">12688</td>
<td>8500120</td>
<td>Courtételle</td>
<td>Jura</td>
<td>Courtételle</td>
<td>Swiss Federal Railways SBB</td>
<td>7.317943</td>
<td>47.342829</td>
<td>436.90</td>
<td>840.0</td>
<td>970.0</td>
<td>550.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12689</td>
<td>8500102</td>
<td>Malleray-Bévilard</td>
<td>Bern</td>
<td>Valbirse</td>
<td>Swiss Federal Railways SBB</td>
<td>7.275946</td>
<td>47.238714</td>
<td>698.18</td>
<td>630.0</td>
<td>780.0</td>
<td>280.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Before we export the edges, we change the station names in the edgelist to the BPUIC to make the edges more compact. Then we transform the dictionary into a dataframe which can finally be exported.</p>
<div id="f1586e2d" class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb55" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb55-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a node dict with BPUIC as values</span></span>
<span id="cb55-2">node_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(nodes.STATION_NAME, nodes.BPUIC))</span>
<span id="cb55-3"></span>
<span id="cb55-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Transform edge dict to nested list and replace all station names with their BPUIC</span></span>
<span id="cb55-5">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [[node_dict[k[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]], node_dict[k[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]], v[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], v[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> edges.items()]</span>
<span id="cb55-6"></span>
<span id="cb55-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a dataframe</span></span>
<span id="cb55-8">edges <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(edges, columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BPUIC1'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'BPUIC2'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NUM_CONNECTIONS'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'AVG_DURATION'</span>])</span>
<span id="cb55-9"></span>
<span id="cb55-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Have a look</span></span>
<span id="cb55-11">edges.head()</span>
<span id="cb55-12"></span>
<span id="cb55-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export edge list</span></span>
<span id="cb55-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># edges.to_csv("edgelist_SoSto.csv", sep = ';', encoding = 'utf-8', index = False)</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="40">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">BPUIC1</th>
<th data-quarto-table-cell-role="th">BPUIC2</th>
<th data-quarto-table-cell-role="th">NUM_CONNECTIONS</th>
<th data-quarto-table-cell-role="th">AVG_DURATION</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>8503000</td>
<td>8500010</td>
<td>36</td>
<td>54.00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>8500010</td>
<td>8500090</td>
<td>67</td>
<td>6.07</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>8500090</td>
<td>8500010</td>
<td>67</td>
<td>6.39</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>8500010</td>
<td>8503000</td>
<td>39</td>
<td>57.87</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>8506286</td>
<td>8506271</td>
<td>34</td>
<td>3.00</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Feel free to download the final results: <a href="nodelist.csv" download="">Nodelist (CSV)</a> and <a href="edgelist_SoSto.csv" download="">Edgelist (CSV)</a>.</p>
<p><em>The title image has been created by Wikimedia user JoachimKohler-HB and is licensed under <a href="https://creativecommons.org/licenses/by-sa/4.0/deed.en">Creative Commons</a>.</em></p>


</section>

 ]]></description>
  <category>Networks</category>
  <guid>https://martinsterchi.ch/blog/sbb_nw/</guid>
  <pubDate>Fri, 28 Feb 2025 00:00:00 GMT</pubDate>
  <media:content url="https://martinsterchi.ch/blog/sbb_nw/sbb_hb.jpg" medium="image" type="image/jpeg"/>
</item>
</channel>
</rss>
