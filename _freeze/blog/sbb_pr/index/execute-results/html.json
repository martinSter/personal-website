{
  "hash": "5920f2cdb5836743a082f73da7d2646d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"SBB Page Rank\"\nauthor:\n  - name: Martin Sterchi\n    email: martin.sterchi@fhnw.ch\ndate: 2025-02-25\ncategories: [\"Networks\"]\nimage: signet.svg\nformat:\n  html:\n    df-print: paged\n    toc: true\ngoogle-scholar: false\n---\n\n::: {#c72d2160 .cell execution_count=1}\n``` {.python .cell-code}\nimport sys\nimport numpy as np\nimport pandas as pd\nimport networkx as nx\n\n# Get the python version used here.\nprint(\"Python version:\", sys.version)\n\n# Check versions of libraries.\nprint(\"NumPy version:\", np.__version__)\nprint(\"Pandas version:\", pd.__version__)\nprint(\"NetworkX version:\", nx.__version__)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPython version: 3.11.7 | packaged by Anaconda, Inc. | (main, Dec 15 2023, 18:05:47) [MSC v.1916 64 bit (AMD64)]\nNumPy version: 1.26.4\nPandas version: 2.1.4\nNetworkX version: 3.1\n```\n:::\n:::\n\n\n::: {#4387e64f .cell execution_count=2}\n``` {.python .cell-code}\n# Import node list.\nnodes = pd.read_csv('nodelist.csv', sep = ';')\n\n# Check the dataframe.\nnodes.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>BPUIC</th>\n      <th>STATION_NAME</th>\n      <th>LONGITUDE</th>\n      <th>LATITUDE</th>\n      <th>ELEVATION</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8500010</td>\n      <td>Basel SBB</td>\n      <td>7.589563</td>\n      <td>47.547412</td>\n      <td>276.75</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>8500016</td>\n      <td>Basel St. Johann</td>\n      <td>7.572529</td>\n      <td>47.570306</td>\n      <td>260.50</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8500020</td>\n      <td>Muttenz</td>\n      <td>7.647894</td>\n      <td>47.533591</td>\n      <td>280.80</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8500021</td>\n      <td>Pratteln</td>\n      <td>7.690817</td>\n      <td>47.522669</td>\n      <td>289.60</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>8500022</td>\n      <td>Frenkendorf-FÃ¼llinsdorf</td>\n      <td>7.719111</td>\n      <td>47.501470</td>\n      <td>310.96</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#8b3d4104 .cell execution_count=3}\n``` {.python .cell-code}\n# Create nodelist in networkx format (with node attributes).\nnodelist = [(\n  row['BPUIC'], {\n    'name': row['STATION_NAME'], \n    'lon': row['LONGITUDE'], \n    'lat': row['LATITUDE'], \n    'elevation': row['ELEVATION']}\n    ) for index, row in nodes.iterrows()]\n```\n:::\n\n\n::: {#7bef7ddc .cell execution_count=4}\n``` {.python .cell-code}\n# Import edge list.\nedges = pd.read_csv('edgelist.csv', sep = ';')\n\n# Check the dataframe.\nedges.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>BPUIC1</th>\n      <th>BPUIC2</th>\n      <th>NUM_CONNECTIONS</th>\n      <th>AVG_DURATION</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>8503424</td>\n      <td>8500090</td>\n      <td>17</td>\n      <td>73.18</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>8500090</td>\n      <td>8503424</td>\n      <td>18</td>\n      <td>72.39</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>8503000</td>\n      <td>8500010</td>\n      <td>35</td>\n      <td>54.00</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>8500010</td>\n      <td>8500090</td>\n      <td>68</td>\n      <td>6.06</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>8500090</td>\n      <td>8500010</td>\n      <td>73</td>\n      <td>6.33</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {#93103b3e .cell execution_count=5}\n``` {.python .cell-code}\n# Create edgelist in networkx format with number of connections as weight\nedgelist = [(int(row['BPUIC1']), int(row['BPUIC2']), row['NUM_CONNECTIONS']) for index, row in edges.iterrows()]\n```\n:::\n\n\n::: {#482644ba .cell execution_count=6}\n``` {.python .cell-code}\n# Directed graph\nG = nx.DiGraph()\n\n# Add nodes\nG.add_nodes_from(nodelist)\n\n# Add edges\nG.add_weighted_edges_from(edgelist)\n```\n:::\n\n\n::: {#90cc6fba .cell execution_count=7}\n``` {.python .cell-code}\n# Get adjacency matrix (it contains the weights by default)\nA = np.transpose(nx.adjacency_matrix(G))\n```\n:::\n\n\n::: {#880c3982 .cell execution_count=8}\n``` {.python .cell-code}\n# Make a column-stochastic matrix out of A\nM = A / np.sum(A, axis = 0)\n```\n:::\n\n\n::: {#5b70a009 .cell execution_count=9}\n``` {.python .cell-code}\n# Check that it is column-stochastic\nnp.sum(M) == M.shape[0]\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#74372426 .cell execution_count=10}\n``` {.python .cell-code}\n# # Initialize PageRank score vector\n# r = np.full((M.shape[0], 1), 1 / M.shape[0])\n# \n# # Initialize epsilon to determine convergence\n# eps = 0.004\n# \n# # Initialize fantasy value for l1_norm\n# l1_norm = 10\n# \n# # Empty list\n# norms = []\n# \n# # To count iterations\n# i = 0\n# \n# # Iterate\n# while l1_norm > eps:\n#     # Iteration step\n#     r_new = np.matmul(M, r)\n#     # L1-norm between old and new r vector\n#     l1_norm = np.linalg.norm(r_new - r, 1)\n#     # Save L1-norms in list\n#     norms.append(l1_norm)\n#     # Set r to new r\n#     r = r_new\n#     # Increment counter\n#     i += 1\n# \n# # How many iterations?\n# print(\"Number of iterations: \", i)\n```\n:::\n\n\n::: {#2a90dd62 .cell execution_count=11}\n``` {.python .cell-code}\n# # Organize the PageRank scores in dict\n# pr = {G.nodes[i]['name']: v[0,0] for i, v in zip(G.nodes, r)}\n# \n# # Sort by values\n# pr = dict(sorted(pr.items(), key = lambda item: item[1], reverse=True))\n```\n:::\n\n\n",
    "supporting": [
      "index_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}