{
  "hash": "ddffbe7974b8356622a35f067e4fa873",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"k-Means for Image Segmentation\"\nauthor:\n  - name: Martin Sterchi\n    email: martin.sterchi@fhnw.ch\ndate: 2025-03-21\ncategories: [\"Data Science\"]\nimage: me.jpg\nformat:\n  html:\n    df-print: paged\n    toc: true\ngoogle-scholar: false\n---\n\n\n\nThe other day, I had a great session with my Master’s students exploring **Clustering**. We focused primarily on the **k-Means** algorithm, and I was reminded of just how cool that algorithm is.\n\nOne of the reasons k-Means is so interesting is that it’s easy to understand and visualize (well, at least in 2D and with numeric-only features). But beyond that, its versatility is what truly makes it stand out. k-Means isn’t just for clustering observations into similar groups, it has a wide range of applications.\n\nFor instance, we can use k-Means for dimensionality reduction, feature engineering, selecting which observations to label in a semi-supervised setting, and even **image segmentation**. If you’re interested in exploring more, I highly recommend [Hands-On Machine Learning with Scikit-Learn, Keras, and TensorFlow](https://www.oreilly.com/library/view/hands-on-machine-learning/9781098125967/) by Aurélien Géron—an excellent resource showcasing the many ways k-Means can be applied.\n\nHere, I’d like to quickly demonstrate how to use k-Means for image segmentation on your own portrait picture using `R`. This is just fun, nothing too terribly useful.\n\n### Loading picture\n\nWe start by loading my FHNW portrait picture (FHNW is my current employer). For this we use the handy `jpeg` package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(jpeg)\n\n# Load image\nX <- readJPEG(\"Martin-Sterchi.jpg\", native = FALSE)\n\n# Dimensions of X\ndim(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 512 512   3\n```\n\n\n:::\n:::\n\n\n\nAs you can see, `X` is a three-dimensional array. You can imagine it as three stacked $512\\times 512$ matrices, one per Red-Green-Blue (RGB) color channel.\n\nNext, we store the original dimensions of `X` and then transform the array into a large matrix, in which every row represents a pixel.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Store dimensions of original image\ndim_original <- dim(X)\n\n# Transform 3D array to matrix\ndim(X) <- c(dim_original[1] * dim_original[2], 3)\n\n# New dimensions of X\ndim(X)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 262144      3\n```\n\n\n:::\n:::\n\n\n\nThe picture is now basically represented as a dataset of $n=512\\cdot 512=262'144$ observations (every observation is a pixel) and $p=3$ columns (the three color channels).\n\n### Running k-Means\n\nThe idea of this type of image segmentation is simple: we let k-Means cluster the observations (pixels) into $k$ groups of similarly colored pixels. Or in other words, pixels with similar RGB color values will be grouped into the same color cluster.\n\nFor now, we let k-Means create $k=2$ clusters.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Set k (number of clusters)\nk <- 2\n\n# Run k-means\nkm.out <- kmeans(X, k, nstart = 20)\n\n# Output k-means\nprint(km.out$centers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       [,1]      [,2]      [,3]\n1 0.4066233 0.2899175 0.2120528\n2 0.8660900 0.8047682 0.7698332\n```\n\n\n:::\n:::\n\n\n\nThe output above are the two cluster centers (or centroids). These two centroids are obviously also colors. Let's visualize the colors:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Two square plots next to each other\npar(mfrow = c(1, 2), pty = \"s\")\n\n# Plot the two centroid colors using rgb()\nplot(1, 1, col = rgb(0.8660900, 0.8047682, 0.7698332), pch = 15, cex = 30, ann = FALSE, axes = FALSE)\nplot(1, 1, col = rgb(0.4066233, 0.2899175, 0.2120528), pch = 15, cex = 30, ann = FALSE, axes = FALSE)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\nThe trick is now to replace the colors of all pixels belonging to a given cluster by the cluster's centroid color. This will lead to a segmentation of the image into (in our case) two areas of different color.\n\nIn `R`, we can create the segmented image array as follows:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create segmented image\nX_segmented <- km.out$centers[km.out$cluster, ]\n```\n:::\n\n\n\n`km.out$cluster` is a vector of length 262'144 defining which pixel belongs to which cluster.\n\nFinally, let's transform the segmented image back to its orignal dimensions.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reshape to original dimensions\ndim(X_segmented) <- dim_original\n```\n:::\n\n\n\n### Plotting the image\n\nWe can now plot the resulting image:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Plot should be square\npar(pty = \"s\")\n\n# Empty plot\nplot(0:1, 0:1, type = \"n\", ann = FALSE, axes = FALSE)\n\n# Add image\nrasterImage(X_segmented, 0, 0, 1, 1)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\nIf you want to export the segmented portrait picture to your working directory, you can run the following command:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Export image\nwriteJPEG(X_segmented, target = \"output.jpg\", quality = 0.7)\n```\n:::\n\n\n\n### 10 Shades of me\n\nFinally, let's plot the segmented images for values of $k=1,\\dots,10$, using a for loop:\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Some plot options\npar(mfrow = c(2, 5), oma = c(0, 0, 0, 0), mar = c(0, 0, 0, 0), pty = \"s\")\n\n# Loop over k = 1, ..., 10\nfor (k in 1:10) {\n  # EMpty plot\n  plot(0:1, 0:1, type = \"n\", ann = FALSE, axes = FALSE)\n  # k-Means\n  km.out <- kmeans(X, k, nstart = 3)\n  # Segmented image\n  X_segmented <- km.out$centers[km.out$cluster, ]\n  # Reshape segmented image\n  dim(X_segmented) <- dim_original\n  # Plot the image\n  rasterImage(X_segmented, 0, 0, 1, 1)\n}\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){fig-align='center' width=672}\n:::\n:::\n\n\n\nFor $k=1$, only one cluster is built and its centroid color is the average color in the image. In that case, the image obviously contains no contours.\n\nI hope you enjoyed that brief post and maybe you can use it to create your own stylized portrait picture.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}